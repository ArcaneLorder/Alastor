; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32537.0 

	TITLE	D:\Code\Alastor\Thirdparty\zlib\contrib\vstudio\vc14\x86\TestZlibDebug\Tmp\deflate.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_deflate_copyright
CONST	SEGMENT
_deflate_copyright DB ' deflate 1.2.13 Copyright 1995-2022 Jean-loup Gail'
	DB	'ly and Mark Adler ', 00H
	ORG $+3
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
?my_version@?1??deflateInit2_@@9@9 DB '1.2.13', 00H	; `deflateInit2_'::`2'::my_version
CONST	ENDS
PUBLIC	_deflate@8
PUBLIC	_deflateEnd@4
PUBLIC	_deflateSetDictionary@12
PUBLIC	_deflateGetDictionary@12
PUBLIC	_deflateCopy@8
PUBLIC	_deflateReset@4
PUBLIC	_deflateParams@12
PUBLIC	_deflateTune@20
PUBLIC	_deflateBound@8
PUBLIC	_deflatePending@12
PUBLIC	_deflatePrime@12
PUBLIC	_deflateSetHeader@8
PUBLIC	_deflateInit_@16
PUBLIC	_deflateInit2_@32
PUBLIC	_deflateResetKeep@4
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_adler32@12:PROC
EXTRN	_crc32@12:PROC
EXTRN	_zcalloc:PROC
EXTRN	_zcfree:PROC
EXTRN	__tr_init:PROC
EXTRN	__tr_flush_block:PROC
EXTRN	__tr_flush_bits:PROC
EXTRN	__tr_align:PROC
EXTRN	__tr_stored_block:PROC
EXTRN	_z_errmsg:BYTE
EXTRN	__length_code:BYTE
EXTRN	__dist_code:BYTE
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_limit$ = -48						; size = 4
_prev$ = -44						; size = 4
_wmask$ = -40						; size = 4
tv78 = -36						; size = 4
_nice_match$ = -32					; size = 4
_len$ = -28						; size = 4
_strend$ = -24						; size = 4
_chain_length$ = -20					; size = 4
_best_len$ = -16					; size = 4
_match$ = -12						; size = 4
_scan$ = -8						; size = 4
_scan_end$ = -2						; size = 1
_scan_end1$ = -1					; size = 1
_s$ = 8							; size = 4
_cur_match$ = 12					; size = 4
_longest_match PROC

; 1281 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 1282 :     unsigned chain_length = s->max_chain_length;/* max hash chain length */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR _chain_length$[ebp], ecx

; 1283 :     register Bytef *scan = s->window + s->strstart; /* current string */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+108]
	mov	DWORD PTR _scan$[ebp], eax

; 1284 :     register Bytef *match;                      /* matched string */
; 1285 :     register int len;                           /* length of current match */
; 1286 :     int best_len = (int)s->prev_length;         /* best match length so far */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	DWORD PTR _best_len$[ebp], eax

; 1287 :     int nice_match = s->nice_match;             /* stop if match long enough */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	DWORD PTR _nice_match$[ebp], edx

; 1288 :     IPos limit = s->strstart > (IPos)MAX_DIST(s) ?

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 262				; 00000106H
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+108], ecx
	jbe	SHORT $LN18@longest_ma
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 262				; 00000106H
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	sub	eax, ecx
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN19@longest_ma
$LN18@longest_ma:
	mov	DWORD PTR tv78[ebp], 0
$LN19@longest_ma:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _limit$[ebp], ecx

; 1289 :         s->strstart - (IPos)MAX_DIST(s) : NIL;
; 1290 :     /* Stop when cur_match becomes <= limit. To simplify the code,
; 1291 :      * we prevent matches with the string of window index 0.
; 1292 :      */
; 1293 :     Posf *prev = s->prev;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _prev$[ebp], eax

; 1294 :     uInt wmask = s->w_mask;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _wmask$[ebp], edx

; 1295 : 
; 1296 : #ifdef UNALIGNED_OK
; 1297 :     /* Compare two bytes at a time. Note: this is not always beneficial.
; 1298 :      * Try with and without -DUNALIGNED_OK to check.
; 1299 :      */
; 1300 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
; 1301 :     register ush scan_start = *(ushf*)scan;
; 1302 :     register ush scan_end   = *(ushf*)(scan + best_len - 1);
; 1303 : #else
; 1304 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	lea	ecx, DWORD PTR [ecx+eax+258]
	mov	DWORD PTR _strend$[ebp], ecx

; 1305 :     register Byte scan_end1  = scan[best_len - 1];

	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, DWORD PTR _best_len$[ebp]
	mov	al, BYTE PTR [edx-1]
	mov	BYTE PTR _scan_end1$[ebp], al

; 1306 :     register Byte scan_end   = scan[best_len];

	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, DWORD PTR _best_len$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _scan_end$[ebp], dl

; 1307 : #endif
; 1308 : 
; 1309 :     /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
; 1310 :      * It is easy to get rid of this optimization if necessary.
; 1311 :      */
; 1312 :     Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
; 1313 : 
; 1314 :     /* Do not waste too much time if we already have a good match: */
; 1315 :     if (s->prev_length >= s->good_match) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+120]
	cmp	edx, DWORD PTR [ecx+140]
	jb	SHORT $LN8@longest_ma

; 1316 :         chain_length >>= 2;

	mov	eax, DWORD PTR _chain_length$[ebp]
	shr	eax, 2
	mov	DWORD PTR _chain_length$[ebp], eax
$LN8@longest_ma:

; 1317 :     }
; 1318 :     /* Do not look for matches beyond the end of the input. This is necessary
; 1319 :      * to make deflate deterministic.
; 1320 :      */
; 1321 :     if ((uInt)nice_match > s->lookahead) nice_match = (int)s->lookahead;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _nice_match$[ebp]
	cmp	edx, DWORD PTR [ecx+116]
	jbe	SHORT $LN4@longest_ma
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR _nice_match$[ebp], ecx
$LN4@longest_ma:

; 1322 : 
; 1323 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1324 :            "need lookahead");
; 1325 : 
; 1326 :     do {
; 1327 :         Assert(cur_match < s->strstart, "no future");
; 1328 :         match = s->window + cur_match;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	add	eax, DWORD PTR _cur_match$[ebp]
	mov	DWORD PTR _match$[ebp], eax

; 1329 : 
; 1330 :         /* Skip to next match if the match length cannot increase
; 1331 :          * or if the match length is less than 2.  Note that the checks below
; 1332 :          * for insufficient lookahead only occur occasionally for performance
; 1333 :          * reasons.  Therefore uninitialized memory will be accessed, and
; 1334 :          * conditional jumps will be made that depend on those values.
; 1335 :          * However the length of the match is limited to the lookahead, so
; 1336 :          * the output of deflate is not affected by the uninitialized values.
; 1337 :          */
; 1338 : #if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
; 1339 :         /* This code assumes sizeof(unsigned short) == 2. Do not use
; 1340 :          * UNALIGNED_OK if your compiler uses a different size.
; 1341 :          */
; 1342 :         if (*(ushf*)(match + best_len - 1) != scan_end ||
; 1343 :             *(ushf*)match != scan_start) continue;
; 1344 : 
; 1345 :         /* It is not necessary to compare scan[2] and match[2] since they are
; 1346 :          * always equal when the other bytes match, given that the hash keys
; 1347 :          * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
; 1348 :          * strstart + 3, + 5, up to strstart + 257. We check for insufficient
; 1349 :          * lookahead only every 4th comparison; the 128th check will be made
; 1350 :          * at strstart + 257. If MAX_MATCH-2 is not a multiple of 8, it is
; 1351 :          * necessary to put more guard bytes at the end of the window, or
; 1352 :          * to check more often for insufficient lookahead.
; 1353 :          */
; 1354 :         Assert(scan[2] == match[2], "scan[2]?");
; 1355 :         scan++, match++;
; 1356 :         do {
; 1357 :         } while (*(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1358 :                  *(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1359 :                  *(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1360 :                  *(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1361 :                  scan < strend);
; 1362 :         /* The funny "do {}" generates better code on most compilers */
; 1363 : 
; 1364 :         /* Here, scan <= window + strstart + 257 */
; 1365 :         Assert(scan <= s->window + (unsigned)(s->window_size - 1),
; 1366 :                "wild scan");
; 1367 :         if (*scan == *match) scan++;
; 1368 : 
; 1369 :         len = (MAX_MATCH - 1) - (int)(strend - scan);
; 1370 :         scan = strend - (MAX_MATCH-1);
; 1371 : 
; 1372 : #else /* UNALIGNED_OK */
; 1373 : 
; 1374 :         if (match[best_len]     != scan_end  ||
; 1375 :             match[best_len - 1] != scan_end1 ||
; 1376 :             *match              != *scan     ||

	mov	ecx, DWORD PTR _match$[ebp]
	add	ecx, DWORD PTR _best_len$[ebp]
	movzx	edx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _scan_end$[ebp]
	cmp	edx, eax
	jne	SHORT $LN11@longest_ma
	mov	ecx, DWORD PTR _match$[ebp]
	add	ecx, DWORD PTR _best_len$[ebp]
	movzx	edx, BYTE PTR [ecx-1]
	movzx	eax, BYTE PTR _scan_end1$[ebp]
	cmp	edx, eax
	jne	SHORT $LN11@longest_ma
	mov	ecx, DWORD PTR _match$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN11@longest_ma
	mov	edx, DWORD PTR _match$[ebp]
	add	edx, 1
	mov	DWORD PTR _match$[ebp], edx
	mov	eax, DWORD PTR _match$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	cmp	ecx, edx
	je	SHORT $LN10@longest_ma
$LN11@longest_ma:

; 1377 :             *++match            != scan[1])      continue;

	jmp	$LN2@longest_ma
$LN10@longest_ma:

; 1378 : 
; 1379 :         /* The check at best_len - 1 can be removed because it will be made
; 1380 :          * again later. (This heuristic is not always a win.)
; 1381 :          * It is not necessary to compare scan[2] and match[2] since they
; 1382 :          * are always equal when the other bytes match, given that
; 1383 :          * the hash keys are equal and that HASH_BITS >= 8.
; 1384 :          */
; 1385 :         scan += 2, match++;

	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 2
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	add	ecx, 1
	mov	DWORD PTR _match$[ebp], ecx
$LN5@longest_ma:

; 1386 :         Assert(*scan == *match, "match[2]?");
; 1387 : 
; 1388 :         /* We check for insufficient lookahead only every 8th comparison;
; 1389 :          * the 256th check will be made at strstart + 258.
; 1390 :          */
; 1391 :         do {
; 1392 :         } while (*++scan == *++match && *++scan == *++match &&
; 1393 :                  *++scan == *++match && *++scan == *++match &&
; 1394 :                  *++scan == *++match && *++scan == *++match &&
; 1395 :                  *++scan == *++match && *++scan == *++match &&

	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _match$[ebp]
	add	eax, 1
	mov	DWORD PTR _match$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, edx
	jne	$LN6@longest_ma
	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _match$[ebp]
	add	eax, 1
	mov	DWORD PTR _match$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, edx
	jne	$LN6@longest_ma
	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _match$[ebp]
	add	eax, 1
	mov	DWORD PTR _match$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, edx
	jne	$LN6@longest_ma
	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _match$[ebp]
	add	eax, 1
	mov	DWORD PTR _match$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, edx
	jne	$LN6@longest_ma
	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _match$[ebp]
	add	eax, 1
	mov	DWORD PTR _match$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, edx
	jne	SHORT $LN6@longest_ma
	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _match$[ebp]
	add	eax, 1
	mov	DWORD PTR _match$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, edx
	jne	SHORT $LN6@longest_ma
	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _match$[ebp]
	add	eax, 1
	mov	DWORD PTR _match$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, edx
	jne	SHORT $LN6@longest_ma
	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _match$[ebp]
	add	eax, 1
	mov	DWORD PTR _match$[ebp], eax
	mov	ecx, DWORD PTR _match$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, edx
	jne	SHORT $LN6@longest_ma
	mov	edx, DWORD PTR _scan$[ebp]
	cmp	edx, DWORD PTR _strend$[ebp]
	jb	$LN5@longest_ma
$LN6@longest_ma:

; 1396 :                  scan < strend);
; 1397 : 
; 1398 :         Assert(scan <= s->window + (unsigned)(s->window_size - 1),
; 1399 :                "wild scan");
; 1400 : 
; 1401 :         len = MAX_MATCH - (int)(strend - scan);

	mov	eax, DWORD PTR _strend$[ebp]
	sub	eax, DWORD PTR _scan$[ebp]
	mov	ecx, 258				; 00000102H
	sub	ecx, eax
	mov	DWORD PTR _len$[ebp], ecx

; 1402 :         scan = strend - MAX_MATCH;

	mov	edx, DWORD PTR _strend$[ebp]
	sub	edx, 258				; 00000102H
	mov	DWORD PTR _scan$[ebp], edx

; 1403 : 
; 1404 : #endif /* UNALIGNED_OK */
; 1405 : 
; 1406 :         if (len > best_len) {

	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR _best_len$[ebp]
	jle	SHORT $LN2@longest_ma

; 1407 :             s->match_start = cur_match;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _cur_match$[ebp]
	mov	DWORD PTR [ecx+112], edx

; 1408 :             best_len = len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _best_len$[ebp], eax

; 1409 :             if (len >= nice_match) break;

	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _nice_match$[ebp]
	jl	SHORT $LN14@longest_ma
	jmp	SHORT $LN3@longest_ma
$LN14@longest_ma:

; 1410 : #ifdef UNALIGNED_OK
; 1411 :             scan_end = *(ushf*)(scan + best_len - 1);
; 1412 : #else
; 1413 :             scan_end1  = scan[best_len - 1];

	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, DWORD PTR _best_len$[ebp]
	mov	al, BYTE PTR [edx-1]
	mov	BYTE PTR _scan_end1$[ebp], al

; 1414 :             scan_end   = scan[best_len];

	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, DWORD PTR _best_len$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _scan_end$[ebp], dl
$LN2@longest_ma:

; 1415 : #endif
; 1416 :         }
; 1417 :     } while ((cur_match = prev[cur_match & wmask]) > limit
; 1418 :              && --chain_length != 0);

	mov	eax, DWORD PTR _cur_match$[ebp]
	and	eax, DWORD PTR _wmask$[ebp]
	mov	ecx, DWORD PTR _prev$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _cur_match$[ebp], edx
	mov	eax, DWORD PTR _cur_match$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN3@longest_ma
	mov	ecx, DWORD PTR _chain_length$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _chain_length$[ebp], ecx
	jne	$LN4@longest_ma
$LN3@longest_ma:

; 1419 : 
; 1420 :     if ((uInt)best_len <= s->lookahead) return (uInt)best_len;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _best_len$[ebp]
	cmp	eax, DWORD PTR [edx+116]
	ja	SHORT $LN16@longest_ma
	mov	eax, DWORD PTR _best_len$[ebp]
	jmp	SHORT $LN1@longest_ma
$LN16@longest_ma:

; 1421 :     return s->lookahead;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+116]
$LN1@longest_ma:

; 1422 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_longest_match ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_len$ = -4						; size = 4
_strm$ = 8						; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_read_buf PROC

; 1219 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1220 :     unsigned len = strm->avail_in;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx

; 1221 : 
; 1222 :     if (len > size) len = size;

	mov	edx, DWORD PTR _len$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN2@read_buf
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _len$[ebp], eax
$LN2@read_buf:

; 1223 :     if (len == 0) return 0;

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN3@read_buf
	xor	eax, eax
	jmp	$LN1@read_buf
$LN3@read_buf:

; 1224 : 
; 1225 :     strm->avail_in  -= len;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1226 : 
; 1227 :     zmemcpy(buf, strm->next_in, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1228 :     if (strm->state->wrap == 1) {

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+24], 1
	jne	SHORT $LN4@read_buf

; 1229 :         strm->adler = adler32(strm->adler, buf, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_adler32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax

; 1230 :     }

	jmp	SHORT $LN5@read_buf
$LN4@read_buf:

; 1231 : #ifdef GZIP
; 1232 :     else if (strm->state->wrap == 2) {

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+24], 2
	jne	SHORT $LN5@read_buf

; 1233 :         strm->adler = crc32(strm->adler, buf, len);

	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN5@read_buf:

; 1234 :     }
; 1235 : #endif
; 1236 :     strm->next_in  += len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx], eax

; 1237 :     strm->total_in += len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1238 : 
; 1239 :     return len;

	mov	eax, DWORD PTR _len$[ebp]
$LN1@read_buf:

; 1240 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_len$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush_pending PROC

; 784  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 785  :     unsigned len;
; 786  :     deflate_state *s = strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 787  : 
; 788  :     _tr_flush_bits(s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_bits
	add	esp, 4

; 789  :     len = s->pending;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _len$[ebp], ecx

; 790  :     if (len > strm->avail_out) len = strm->avail_out;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jbe	SHORT $LN2@flush_pend
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _len$[ebp], edx
$LN2@flush_pend:

; 791  :     if (len == 0) return;

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN3@flush_pend
	jmp	SHORT $LN1@flush_pend
$LN3@flush_pend:

; 792  : 
; 793  :     zmemcpy(strm->next_out, s->pending_out, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 794  :     strm->next_out  += len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 795  :     s->pending_out  += len;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 796  :     strm->total_out += len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 797  :     strm->avail_out -= len;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 798  :     s->pending      -= len;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 799  :     if (s->pending == 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+20], 0
	jne	SHORT $LN1@flush_pend

; 800  :         s->pending_out = s->pending_buf;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+16], edx
$LN1@flush_pend:

; 801  :     }
; 802  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_flush_pending ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_s$ = 8							; size = 4
_b$ = 12						; size = 4
_putShortMSB PROC

; 771  : {

	push	ebp
	mov	ebp, esp

; 772  :     put_byte(s, (Byte)(b >> 8));

	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 773  :     put_byte(s, (Byte)(b & 0xff));

	mov	edx, DWORD PTR _b$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 774  : }

	pop	ebp
	ret	0
_putShortMSB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_s$ = 8							; size = 4
_lm_init PROC

; 1247 : {

	push	ebp
	mov	ebp, esp

; 1248 :     s->window_size = (ulg)2L*s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	shl	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+60], ecx
$LN4@lm_init:

; 1249 : 
; 1250 :     CLEAR_HASH(s);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2-2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	lea	edx, DWORD PTR [ecx+ecx-2]
	push	edx
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
	xor	edx, edx
	jne	SHORT $LN4@lm_init

; 1251 : 
; 1252 :     /* Set the default configuration parameters:
; 1253 :      */
; 1254 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	movzx	edx, WORD PTR _configuration_table[ecx+2]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+128], edx

; 1255 :     s->good_match       = configuration_table[s->level].good_length;

	mov	ecx, DWORD PTR _s$[ebp]
	imul	edx, DWORD PTR [ecx+132], 12
	movzx	eax, WORD PTR _configuration_table[edx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+140], eax

; 1256 :     s->nice_match       = configuration_table[s->level].nice_length;

	mov	edx, DWORD PTR _s$[ebp]
	imul	eax, DWORD PTR [edx+132], 12
	movzx	ecx, WORD PTR _configuration_table[eax+4]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+144], ecx

; 1257 :     s->max_chain_length = configuration_table[s->level].max_chain;

	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	movzx	edx, WORD PTR _configuration_table[ecx+6]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+124], edx

; 1258 : 
; 1259 :     s->strstart = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+108], 0

; 1260 :     s->block_start = 0L;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+92], 0

; 1261 :     s->lookahead = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], 0

; 1262 :     s->insert = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5812], 0

; 1263 :     s->match_length = s->prev_length = MIN_MATCH-1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+120], 2
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 2

; 1264 :     s->match_available = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+104], 0

; 1265 :     s->ins_h = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], 0

; 1266 : }

	pop	ebp
	ret	0
_lm_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_bflush$ = -24						; size = 4
tv214 = -20						; size = 4
tv191 = -16						; size = 4
tv168 = -12						; size = 4
tv147 = -8						; size = 4
_cc$1 = -1						; size = 1
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_huff PROC

; 2187 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
$LN4@deflate_hu:

; 2188 :     int bflush;             /* set if current block must be flushed */
; 2189 : 
; 2190 :     for (;;) {
; 2191 :         /* Make sure that we have a literal to write. */
; 2192 :         if (s->lookahead == 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN5@deflate_hu

; 2193 :             fill_window(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_fill_window
	add	esp, 4

; 2194 :             if (s->lookahead == 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 0
	jne	SHORT $LN5@deflate_hu

; 2195 :                 if (flush == Z_NO_FLUSH)

	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN7@deflate_hu

; 2196 :                     return need_more;

	xor	eax, eax
	jmp	$LN1@deflate_hu
$LN7@deflate_hu:

; 2197 :                 break;      /* flush the current block */

	jmp	$LN3@deflate_hu
$LN5@deflate_hu:

; 2198 :             }
; 2199 :         }
; 2200 : 
; 2201 :         /* Output a literal byte */
; 2202 :         s->match_length = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 0

; 2203 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 2204 :         _tr_tally_lit(s, s->window[s->strstart], bflush);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	dl, BYTE PTR [ecx+edx]
	mov	BYTE PTR _cc$1[ebp], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	BYTE PTR [eax+ecx], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	BYTE PTR [ecx+edx], 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5784]
	mov	cl, BYTE PTR _cc$1[ebp]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	movzx	edx, BYTE PTR _cc$1[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+edx*4+148]
	add	cx, 1
	movzx	edx, BYTE PTR _cc$1[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax+edx*4+148], cx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+5792]
	cmp	eax, DWORD PTR [edx+5796]
	jne	SHORT $LN15@deflate_hu
	mov	DWORD PTR tv147[ebp], 1
	jmp	SHORT $LN16@deflate_hu
$LN15@deflate_hu:
	mov	DWORD PTR tv147[ebp], 0
$LN16@deflate_hu:
	mov	ecx, DWORD PTR tv147[ebp]
	mov	DWORD PTR _bflush$[ebp], ecx

; 2205 :         s->lookahead--;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	sub	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 2206 :         s->strstart++;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+108], eax

; 2207 :         if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN8@deflate_hu
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jl	SHORT $LN17@deflate_hu
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR tv168[ebp], ecx
	jmp	SHORT $LN18@deflate_hu
$LN17@deflate_hu:
	mov	DWORD PTR tv168[ebp], 0
$LN18@deflate_hu:
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR tv168[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+92], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_flush_pending
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN8@deflate_hu
	xor	eax, eax
	jmp	$LN1@deflate_hu
$LN8@deflate_hu:

; 2208 :     }

	jmp	$LN4@deflate_hu
$LN3@deflate_hu:

; 2209 :     s->insert = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5812], 0

; 2210 :     if (flush == Z_FINISH) {

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN10@deflate_hu

; 2211 :         FLUSH_BLOCK(s, 1);

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN19@deflate_hu
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv191[ebp], eax
	jmp	SHORT $LN20@deflate_hu
$LN19@deflate_hu:
	mov	DWORD PTR tv191[ebp], 0
$LN20@deflate_hu:
	push	1
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv191[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN11@deflate_hu
	mov	eax, 2
	jmp	$LN1@deflate_hu
$LN11@deflate_hu:

; 2212 :         return finish_done;

	mov	eax, 3
	jmp	SHORT $LN1@deflate_hu
$LN10@deflate_hu:

; 2213 :     }
; 2214 :     if (s->sym_next)

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], 0
	je	SHORT $LN12@deflate_hu

; 2215 :         FLUSH_BLOCK(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN21@deflate_hu
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv214[ebp], edx
	jmp	SHORT $LN22@deflate_hu
$LN21@deflate_hu:
	mov	DWORD PTR tv214[ebp], 0
$LN22@deflate_hu:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv214[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN12@deflate_hu
	xor	eax, eax
	jmp	SHORT $LN1@deflate_hu
$LN12@deflate_hu:

; 2216 :     return block_done;

	mov	eax, 1
$LN1@deflate_hu:

; 2217 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_huff ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
tv371 = -48						; size = 4
tv348 = -44						; size = 4
tv325 = -40						; size = 4
_bflush$ = -36						; size = 4
tv304 = -32						; size = 4
tv250 = -28						; size = 4
_strend$ = -24						; size = 4
tv234 = -20						; size = 4
_prev$ = -16						; size = 4
_scan$ = -12						; size = 4
_dist$1 = -8						; size = 2
_cc$2 = -2						; size = 1
_len$3 = -1						; size = 1
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_rle PROC

; 2113 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
$LN4@deflate_rl:

; 2114 :     int bflush;             /* set if current block must be flushed */
; 2115 :     uInt prev;              /* byte at distance one to match */
; 2116 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 2117 : 
; 2118 :     for (;;) {
; 2119 :         /* Make sure that we always have enough lookahead, except
; 2120 :          * at the end of the input file. We need MAX_MATCH bytes
; 2121 :          * for the longest run, plus one for the unrolled loop.
; 2122 :          */
; 2123 :         if (s->lookahead <= MAX_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 258		; 00000102H
	ja	SHORT $LN8@deflate_rl

; 2124 :             fill_window(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_fill_window
	add	esp, 4

; 2125 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 258		; 00000102H
	ja	SHORT $LN9@deflate_rl
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN9@deflate_rl

; 2126 :                 return need_more;

	xor	eax, eax
	jmp	$LN1@deflate_rl
$LN9@deflate_rl:

; 2127 :             }
; 2128 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN8@deflate_rl
	jmp	$LN3@deflate_rl
$LN8@deflate_rl:

; 2129 :         }
; 2130 : 
; 2131 :         /* See how many times the previous byte repeats */
; 2132 :         s->match_length = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], 0

; 2133 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 3
	jb	$LN11@deflate_rl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	jbe	$LN11@deflate_rl

; 2134 :             scan = s->window + s->strstart - 1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _scan$[ebp], edx

; 2135 :             prev = *scan;

	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _prev$[ebp], ecx

; 2136 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _prev$[ebp], ecx
	jne	$LN11@deflate_rl
	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _prev$[ebp], ecx
	jne	$LN11@deflate_rl
	mov	edx, DWORD PTR _scan$[ebp]
	add	edx, 1
	mov	DWORD PTR _scan$[ebp], edx
	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _prev$[ebp], ecx
	jne	$LN11@deflate_rl

; 2137 :                 strend = s->window + s->strstart + MAX_MATCH;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	lea	eax, DWORD PTR [eax+edx+258]
	mov	DWORD PTR _strend$[ebp], eax
$LN5@deflate_rl:

; 2138 :                 do {
; 2139 :                 } while (prev == *++scan && prev == *++scan &&
; 2140 :                          prev == *++scan && prev == *++scan &&
; 2141 :                          prev == *++scan && prev == *++scan &&
; 2142 :                          prev == *++scan && prev == *++scan &&

	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	$LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	$LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scan$[ebp], ecx
	mov	edx, DWORD PTR _scan$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _prev$[ebp], eax
	jne	SHORT $LN6@deflate_rl
	mov	ecx, DWORD PTR _scan$[ebp]
	cmp	ecx, DWORD PTR _strend$[ebp]
	jb	$LN5@deflate_rl
$LN6@deflate_rl:

; 2143 :                          scan < strend);
; 2144 :                 s->match_length = MAX_MATCH - (uInt)(strend - scan);

	mov	edx, DWORD PTR _strend$[ebp]
	sub	edx, DWORD PTR _scan$[ebp]
	mov	eax, 258				; 00000102H
	sub	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], eax

; 2145 :                 if (s->match_length > s->lookahead)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+96]
	cmp	ecx, DWORD PTR [eax+116]
	jbe	SHORT $LN11@deflate_rl

; 2146 :                     s->match_length = s->lookahead;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	DWORD PTR [edx+96], ecx
$LN11@deflate_rl:

; 2147 :             }
; 2148 :             Assert(scan <= s->window + (uInt)(s->window_size - 1),
; 2149 :                    "wild scan");
; 2150 :         }
; 2151 : 
; 2152 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 2153 :         if (s->match_length >= MIN_MATCH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+96], 3
	jb	$LN15@deflate_rl

; 2154 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 2155 : 
; 2156 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 3
	mov	BYTE PTR _len$3[ebp], cl
	mov	edx, 1
	mov	WORD PTR _dist$1[ebp], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _dist$1[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	movzx	eax, WORD PTR _dist$1[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5784]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5784]
	mov	cl, BYTE PTR _len$3[ebp]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	mov	dx, WORD PTR _dist$1[ebp]
	sub	dx, 1
	mov	WORD PTR _dist$1[ebp], dx
	movzx	eax, BYTE PTR _len$3[ebp]
	movzx	ecx, BYTE PTR __length_code[eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+1176]
	add	ax, 1
	movzx	ecx, BYTE PTR _len$3[ebp]
	movzx	edx, BYTE PTR __length_code[ecx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx*4+1176], ax
	movzx	edx, WORD PTR _dist$1[ebp]
	cmp	edx, 256				; 00000100H
	jge	SHORT $LN24@deflate_rl
	movzx	eax, WORD PTR _dist$1[ebp]
	movzx	ecx, BYTE PTR __dist_code[eax]
	mov	DWORD PTR tv234[ebp], ecx
	jmp	SHORT $LN25@deflate_rl
$LN24@deflate_rl:
	movzx	edx, WORD PTR _dist$1[ebp]
	sar	edx, 7
	movzx	eax, BYTE PTR __dist_code[edx+256]
	mov	DWORD PTR tv234[ebp], eax
$LN25@deflate_rl:
	mov	ecx, DWORD PTR tv234[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+2440]
	add	ax, 1
	mov	ecx, DWORD PTR tv234[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+2440], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+5792]
	cmp	edx, DWORD PTR [ecx+5796]
	jne	SHORT $LN26@deflate_rl
	mov	DWORD PTR tv250[ebp], 1
	jmp	SHORT $LN27@deflate_rl
$LN26@deflate_rl:
	mov	DWORD PTR tv250[ebp], 0
$LN27@deflate_rl:
	mov	eax, DWORD PTR tv250[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 2157 : 
; 2158 :             s->lookahead -= s->match_length;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+116]
	sub	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 2159 :             s->strstart += s->match_length;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+96]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], eax

; 2160 :             s->match_length = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 0

; 2161 :         } else {

	jmp	$LN16@deflate_rl
$LN15@deflate_rl:

; 2162 :             /* No match, output a literal byte */
; 2163 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 2164 :             _tr_tally_lit(s, s->window[s->strstart], bflush);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	dl, BYTE PTR [ecx+edx]
	mov	BYTE PTR _cc$2[ebp], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	BYTE PTR [eax+ecx], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	BYTE PTR [ecx+edx], 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5784]
	mov	cl, BYTE PTR _cc$2[ebp]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	movzx	edx, BYTE PTR _cc$2[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+edx*4+148]
	add	cx, 1
	movzx	edx, BYTE PTR _cc$2[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax+edx*4+148], cx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+5792]
	cmp	eax, DWORD PTR [edx+5796]
	jne	SHORT $LN28@deflate_rl
	mov	DWORD PTR tv304[ebp], 1
	jmp	SHORT $LN29@deflate_rl
$LN28@deflate_rl:
	mov	DWORD PTR tv304[ebp], 0
$LN29@deflate_rl:
	mov	ecx, DWORD PTR tv304[ebp]
	mov	DWORD PTR _bflush$[ebp], ecx

; 2165 :             s->lookahead--;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	sub	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 2166 :             s->strstart++;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+108], eax
$LN16@deflate_rl:

; 2167 :         }
; 2168 :         if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN17@deflate_rl
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jl	SHORT $LN30@deflate_rl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR tv325[ebp], ecx
	jmp	SHORT $LN31@deflate_rl
$LN30@deflate_rl:
	mov	DWORD PTR tv325[ebp], 0
$LN31@deflate_rl:
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR tv325[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+92], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_flush_pending
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN17@deflate_rl
	xor	eax, eax
	jmp	$LN1@deflate_rl
$LN17@deflate_rl:

; 2169 :     }

	jmp	$LN4@deflate_rl
$LN3@deflate_rl:

; 2170 :     s->insert = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5812], 0

; 2171 :     if (flush == Z_FINISH) {

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN19@deflate_rl

; 2172 :         FLUSH_BLOCK(s, 1);

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN32@deflate_rl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv348[ebp], eax
	jmp	SHORT $LN33@deflate_rl
$LN32@deflate_rl:
	mov	DWORD PTR tv348[ebp], 0
$LN33@deflate_rl:
	push	1
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv348[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN20@deflate_rl
	mov	eax, 2
	jmp	$LN1@deflate_rl
$LN20@deflate_rl:

; 2173 :         return finish_done;

	mov	eax, 3
	jmp	SHORT $LN1@deflate_rl
$LN19@deflate_rl:

; 2174 :     }
; 2175 :     if (s->sym_next)

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], 0
	je	SHORT $LN21@deflate_rl

; 2176 :         FLUSH_BLOCK(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN34@deflate_rl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv371[ebp], edx
	jmp	SHORT $LN35@deflate_rl
$LN34@deflate_rl:
	mov	DWORD PTR tv371[ebp], 0
$LN35@deflate_rl:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv371[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN21@deflate_rl
	xor	eax, eax
	jmp	SHORT $LN1@deflate_rl
$LN21@deflate_rl:

; 2177 :     return block_done;

	mov	eax, 1
$LN1@deflate_rl:

; 2178 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_rle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_max_insert$1 = -64					; size = 4
tv528 = -60						; size = 4
tv505 = -56						; size = 4
tv492 = -52						; size = 4
tv486 = -48						; size = 4
tv412 = -44						; size = 4
tv399 = -40						; size = 4
tv342 = -36						; size = 4
tv322 = -32						; size = 4
tv283 = -28						; size = 4
tv272 = -24						; size = 4
tv256 = -20						; size = 4
_bflush$ = -16						; size = 4
_hash_head$ = -12					; size = 4
_dist$2 = -8						; size = 2
_cc$3 = -3						; size = 1
_cc$4 = -2						; size = 1
_len$5 = -1						; size = 1
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC

; 1982 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
$LN4@deflate_sl:

; 1983 :     IPos hash_head;          /* head of hash chain */
; 1984 :     int bflush;              /* set if current block must be flushed */
; 1985 : 
; 1986 :     /* Process the input block. */
; 1987 :     for (;;) {
; 1988 :         /* Make sure that we always have enough lookahead, except
; 1989 :          * at the end of the input file. We need MAX_MATCH bytes
; 1990 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1991 :          * string following the next match.
; 1992 :          */
; 1993 :         if (s->lookahead < MIN_LOOKAHEAD) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN8@deflate_sl

; 1994 :             fill_window(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_fill_window
	add	esp, 4

; 1995 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 262		; 00000106H
	jae	SHORT $LN9@deflate_sl
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN9@deflate_sl

; 1996 :                 return need_more;

	xor	eax, eax
	jmp	$LN1@deflate_sl
$LN9@deflate_sl:

; 1997 :             }
; 1998 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN8@deflate_sl
	jmp	$LN3@deflate_sl
$LN8@deflate_sl:

; 1999 :         }
; 2000 : 
; 2001 :         /* Insert the string window[strstart .. strstart + 2] in the
; 2002 :          * dictionary, and set hash_head to the head of the hash chain:
; 2003 :          */
; 2004 :         hash_head = NIL;

	mov	DWORD PTR _hash_head$[ebp], 0

; 2005 :         if (s->lookahead >= MIN_MATCH) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+116], 3
	jb	$LN11@deflate_sl

; 2006 :             INSERT_STRING(s, s->strstart, hash_head);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [eax+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx
$LN11@deflate_sl:

; 2007 :         }
; 2008 : 
; 2009 :         /* Find the longest match, discarding those <= prev_length.
; 2010 :          */
; 2011 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+120], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+100], edx

; 2012 :         s->match_length = MIN_MATCH-1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 2

; 2013 : 
; 2014 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&

	cmp	DWORD PTR _hash_head$[ebp], 0
	je	SHORT $LN12@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+120]
	cmp	eax, DWORD PTR [edx+128]
	jae	SHORT $LN12@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	sub	edx, DWORD PTR _hash_head$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 262				; 00000106H
	cmp	edx, ecx
	ja	SHORT $LN12@deflate_sl

; 2015 :             s->strstart - hash_head <= MAX_DIST(s)) {
; 2016 :             /* To simplify the code, we prevent matches with the string
; 2017 :              * of window index 0 (in particular we have to avoid a match
; 2018 :              * of the string with itself at the start of the input file).
; 2019 :              */
; 2020 :             s->match_length = longest_match (s, hash_head);

	mov	edx, DWORD PTR _hash_head$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_longest_match
	add	esp, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], eax

; 2021 :             /* longest_match() sets match_start */
; 2022 : 
; 2023 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+96], 5
	ja	SHORT $LN12@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 1
	je	SHORT $LN14@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+96], 3
	jne	SHORT $LN12@deflate_sl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+112]
	cmp	ecx, 4096				; 00001000H
	jbe	SHORT $LN12@deflate_sl
$LN14@deflate_sl:

; 2024 : #if TOO_FAR <= 32767
; 2025 :                 || (s->match_length == MIN_MATCH &&
; 2026 :                     s->strstart - s->match_start > TOO_FAR)
; 2027 : #endif
; 2028 :                 )) {
; 2029 : 
; 2030 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 2031 :                  * but we will ignore the current match anyway.
; 2032 :                  */
; 2033 :                 s->match_length = MIN_MATCH-1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], 2
$LN12@deflate_sl:

; 2034 :             }
; 2035 :         }
; 2036 :         /* If there was a match at the previous step and the current
; 2037 :          * match is not better, output the previous match:
; 2038 :          */
; 2039 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+120], 3
	jb	$LN15@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+96]
	cmp	eax, DWORD PTR [edx+120]
	ja	$LN15@deflate_sl

; 2040 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	lea	edx, DWORD PTR [edx+ecx-3]
	mov	DWORD PTR _max_insert$1[ebp], edx

; 2041 :             /* Do not insert strings in hash table beyond this. */
; 2042 : 
; 2043 :             check_match(s, s->strstart - 1, s->prev_match, s->prev_length);
; 2044 : 
; 2045 :             _tr_tally_dist(s, s->strstart - 1 - s->prev_match,

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 3
	mov	BYTE PTR _len$5[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	sub	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	sub	eax, DWORD PTR [ecx+100]
	mov	WORD PTR _dist$2[ebp], ax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5784]
	mov	cl, BYTE PTR _dist$2[ebp]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	movzx	edx, WORD PTR _dist$2[ebp]
	sar	edx, 8
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+5784]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	al, BYTE PTR _len$5[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	mov	cx, WORD PTR _dist$2[ebp]
	sub	cx, 1
	mov	WORD PTR _dist$2[ebp], cx
	movzx	edx, BYTE PTR _len$5[ebp]
	movzx	eax, BYTE PTR __length_code[edx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+1176]
	add	dx, 1
	movzx	eax, BYTE PTR _len$5[ebp]
	movzx	ecx, BYTE PTR __length_code[eax]
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax+ecx*4+1176], dx
	movzx	ecx, WORD PTR _dist$2[ebp]
	cmp	ecx, 256				; 00000100H
	jge	SHORT $LN30@deflate_sl
	movzx	edx, WORD PTR _dist$2[ebp]
	movzx	eax, BYTE PTR __dist_code[edx]
	mov	DWORD PTR tv256[ebp], eax
	jmp	SHORT $LN31@deflate_sl
$LN30@deflate_sl:
	movzx	ecx, WORD PTR _dist$2[ebp]
	sar	ecx, 7
	movzx	edx, BYTE PTR __dist_code[ecx+256]
	mov	DWORD PTR tv256[ebp], edx
$LN31@deflate_sl:
	mov	eax, DWORD PTR tv256[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+2440]
	add	dx, 1
	mov	eax, DWORD PTR tv256[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+2440], dx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+5792]
	cmp	ecx, DWORD PTR [eax+5796]
	jne	SHORT $LN32@deflate_sl
	mov	DWORD PTR tv272[ebp], 1
	jmp	SHORT $LN33@deflate_sl
$LN32@deflate_sl:
	mov	DWORD PTR tv272[ebp], 0
$LN33@deflate_sl:
	mov	edx, DWORD PTR tv272[ebp]
	mov	DWORD PTR _bflush$[ebp], edx

; 2046 :                            s->prev_length - MIN_MATCH, bflush);
; 2047 : 
; 2048 :             /* Insert in hash table all strings up to the end of the match.
; 2049 :              * strstart - 1 and strstart are already inserted. If there is not
; 2050 :              * enough lookahead, the last two strings are not inserted in
; 2051 :              * the hash table.
; 2052 :              */
; 2053 :             s->lookahead -= s->prev_length - 1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	sub	eax, ecx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 2054 :             s->prev_length -= 2;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+120]
	sub	eax, 2
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+120], eax
$LN7@deflate_sl:

; 2055 :             do {
; 2056 :                 if (++s->strstart <= max_insert) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	add	eax, 1
	mov	DWORD PTR tv283[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR tv283[ebp]
	mov	DWORD PTR [ecx+108], edx
	mov	eax, DWORD PTR tv283[ebp]
	cmp	eax, DWORD PTR _max_insert$1[ebp]
	ja	$LN5@deflate_sl

; 2057 :                     INSERT_STRING(s, s->strstart, hash_head);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	mov	ecx, DWORD PTR [edx+88]
	shl	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movzx	edx, BYTE PTR [ecx+edx+2]
	xor	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	and	eax, DWORD PTR [ecx+84]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+108]
	and	edx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	ax, WORD PTR [eax+ecx*2]
	mov	WORD PTR [esi+edx*2], ax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	and	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	DWORD PTR _hash_head$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [eax+108]
	mov	WORD PTR [ecx+edx*2], ax
$LN5@deflate_sl:

; 2058 :                 }
; 2059 :             } while (--s->prev_length != 0);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	sub	edx, 1
	mov	DWORD PTR tv322[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR tv322[ebp]
	mov	DWORD PTR [eax+120], ecx
	cmp	DWORD PTR tv322[ebp], 0
	jne	$LN7@deflate_sl

; 2060 :             s->match_available = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+104], 0

; 2061 :             s->match_length = MIN_MATCH-1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 2

; 2062 :             s->strstart++;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], edx

; 2063 : 
; 2064 :             if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN18@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN34@deflate_sl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv342[ebp], eax
	jmp	SHORT $LN35@deflate_sl
$LN34@deflate_sl:
	mov	DWORD PTR tv342[ebp], 0
$LN35@deflate_sl:
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv342[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN18@deflate_sl
	xor	eax, eax
	jmp	$LN1@deflate_sl
$LN18@deflate_sl:
	jmp	$LN16@deflate_sl
$LN15@deflate_sl:

; 2065 : 
; 2066 :         } else if (s->match_available) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+104], 0
	je	$LN20@deflate_sl

; 2067 :             /* If there was no match at the previous position, output a
; 2068 :              * single literal. If there was a match but the current match
; 2069 :              * is longer, truncate the previous match to a single literal.
; 2070 :              */
; 2071 :             Tracevv((stderr,"%c", s->window[s->strstart - 1]));
; 2072 :             _tr_tally_lit(s, s->window[s->strstart - 1], bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	cl, BYTE PTR [eax+ecx-1]
	mov	BYTE PTR _cc$4[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5784]
	mov	BYTE PTR [edx+eax], 0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	BYTE PTR [eax+ecx], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	al, BYTE PTR _cc$4[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	movzx	ecx, BYTE PTR _cc$4[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+148]
	add	ax, 1
	movzx	ecx, BYTE PTR _cc$4[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+148], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+5792]
	cmp	edx, DWORD PTR [ecx+5796]
	jne	SHORT $LN36@deflate_sl
	mov	DWORD PTR tv399[ebp], 1
	jmp	SHORT $LN37@deflate_sl
$LN36@deflate_sl:
	mov	DWORD PTR tv399[ebp], 0
$LN37@deflate_sl:
	mov	eax, DWORD PTR tv399[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 2073 :             if (bflush) {

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN22@deflate_sl

; 2074 :                 FLUSH_BLOCK_ONLY(s, 0);

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN38@deflate_sl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv412[ebp], eax
	jmp	SHORT $LN39@deflate_sl
$LN38@deflate_sl:
	mov	DWORD PTR tv412[ebp], 0
$LN39@deflate_sl:
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv412[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
$LN22@deflate_sl:

; 2075 :             }
; 2076 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 2077 :             s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 2078 :             if (s->strm->avail_out == 0) return need_more;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN23@deflate_sl
	xor	eax, eax
	jmp	$LN1@deflate_sl
$LN23@deflate_sl:

; 2079 :         } else {

	jmp	SHORT $LN16@deflate_sl
$LN20@deflate_sl:

; 2080 :             /* There is no previous match to compare with, wait for
; 2081 :              * the next step to decide.
; 2082 :              */
; 2083 :             s->match_available = 1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+104], 1

; 2084 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 2085 :             s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx
$LN16@deflate_sl:

; 2086 :         }
; 2087 :     }

	jmp	$LN4@deflate_sl
$LN3@deflate_sl:

; 2088 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 2089 :     if (s->match_available) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	$LN24@deflate_sl

; 2090 :         Tracevv((stderr,"%c", s->window[s->strstart - 1]));
; 2091 :         _tr_tally_lit(s, s->window[s->strstart - 1], bflush);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	dl, BYTE PTR [ecx+edx-1]
	mov	BYTE PTR _cc$3[ebp], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	BYTE PTR [eax+ecx], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	BYTE PTR [ecx+edx], 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5784]
	mov	cl, BYTE PTR _cc$3[ebp]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	movzx	edx, BYTE PTR _cc$3[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+edx*4+148]
	add	cx, 1
	movzx	edx, BYTE PTR _cc$3[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax+edx*4+148], cx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+5792]
	cmp	eax, DWORD PTR [edx+5796]
	jne	SHORT $LN40@deflate_sl
	mov	DWORD PTR tv486[ebp], 1
	jmp	SHORT $LN41@deflate_sl
$LN40@deflate_sl:
	mov	DWORD PTR tv486[ebp], 0
$LN41@deflate_sl:
	mov	ecx, DWORD PTR tv486[ebp]
	mov	DWORD PTR _bflush$[ebp], ecx

; 2092 :         s->match_available = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+104], 0
$LN24@deflate_sl:

; 2093 :     }
; 2094 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 2
	jae	SHORT $LN42@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR tv492[ebp], edx
	jmp	SHORT $LN43@deflate_sl
$LN42@deflate_sl:
	mov	DWORD PTR tv492[ebp], 2
$LN43@deflate_sl:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR tv492[ebp]
	mov	DWORD PTR [eax+5812], ecx

; 2095 :     if (flush == Z_FINISH) {

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN25@deflate_sl

; 2096 :         FLUSH_BLOCK(s, 1);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jl	SHORT $LN44@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR tv505[ebp], ecx
	jmp	SHORT $LN45@deflate_sl
$LN44@deflate_sl:
	mov	DWORD PTR tv505[ebp], 0
$LN45@deflate_sl:
	push	1
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR tv505[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+92], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_flush_pending
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN26@deflate_sl
	mov	eax, 2
	jmp	$LN1@deflate_sl
$LN26@deflate_sl:

; 2097 :         return finish_done;

	mov	eax, 3
	jmp	SHORT $LN1@deflate_sl
$LN25@deflate_sl:

; 2098 :     }
; 2099 :     if (s->sym_next)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5792], 0
	je	SHORT $LN27@deflate_sl

; 2100 :         FLUSH_BLOCK(s, 0);

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	jl	SHORT $LN46@deflate_sl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR tv528[ebp], eax
	jmp	SHORT $LN47@deflate_sl
$LN46@deflate_sl:
	mov	DWORD PTR tv528[ebp], 0
$LN47@deflate_sl:
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv528[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN27@deflate_sl
	xor	eax, eax
	jmp	SHORT $LN1@deflate_sl
$LN27@deflate_sl:

; 2101 :     return block_done;

	mov	eax, 1
$LN1@deflate_sl:

; 2102 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_slow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
tv445 = -48						; size = 4
tv422 = -44						; size = 4
tv409 = -40						; size = 4
tv395 = -36						; size = 4
_bflush$ = -32						; size = 4
tv374 = -28						; size = 4
tv300 = -24						; size = 4
tv245 = -20						; size = 4
tv229 = -16						; size = 4
_hash_head$ = -12					; size = 4
_dist$1 = -8						; size = 2
_cc$2 = -2						; size = 1
_len$3 = -1						; size = 1
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC

; 1880 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
$LN4@deflate_fa:

; 1881 :     IPos hash_head;       /* head of the hash chain */
; 1882 :     int bflush;           /* set if current block must be flushed */
; 1883 : 
; 1884 :     for (;;) {
; 1885 :         /* Make sure that we always have enough lookahead, except
; 1886 :          * at the end of the input file. We need MAX_MATCH bytes
; 1887 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1888 :          * string following the next match.
; 1889 :          */
; 1890 :         if (s->lookahead < MIN_LOOKAHEAD) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN8@deflate_fa

; 1891 :             fill_window(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_fill_window
	add	esp, 4

; 1892 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 262		; 00000106H
	jae	SHORT $LN9@deflate_fa
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN9@deflate_fa

; 1893 :                 return need_more;

	xor	eax, eax
	jmp	$LN1@deflate_fa
$LN9@deflate_fa:

; 1894 :             }
; 1895 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN8@deflate_fa
	jmp	$LN3@deflate_fa
$LN8@deflate_fa:

; 1896 :         }
; 1897 : 
; 1898 :         /* Insert the string window[strstart .. strstart + 2] in the
; 1899 :          * dictionary, and set hash_head to the head of the hash chain:
; 1900 :          */
; 1901 :         hash_head = NIL;

	mov	DWORD PTR _hash_head$[ebp], 0

; 1902 :         if (s->lookahead >= MIN_MATCH) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+116], 3
	jb	$LN11@deflate_fa

; 1903 :             INSERT_STRING(s, s->strstart, hash_head);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [eax+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx
$LN11@deflate_fa:

; 1904 :         }
; 1905 : 
; 1906 :         /* Find the longest match, discarding those <= prev_length.
; 1907 :          * At this point we have always match_length < MIN_MATCH
; 1908 :          */
; 1909 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

	cmp	DWORD PTR _hash_head$[ebp], 0
	je	SHORT $LN12@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _hash_head$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, 262				; 00000106H
	cmp	ecx, eax
	ja	SHORT $LN12@deflate_fa

; 1910 :             /* To simplify the code, we prevent matches with the string
; 1911 :              * of window index 0 (in particular we have to avoid a match
; 1912 :              * of the string with itself at the start of the input file).
; 1913 :              */
; 1914 :             s->match_length = longest_match (s, hash_head);

	mov	ecx, DWORD PTR _hash_head$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_longest_match
	add	esp, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], eax
$LN12@deflate_fa:

; 1915 :             /* longest_match() sets match_start */
; 1916 :         }
; 1917 :         if (s->match_length >= MIN_MATCH) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+96], 3
	jb	$LN13@deflate_fa

; 1918 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1919 : 
; 1920 :             _tr_tally_dist(s, s->strstart - s->match_start,

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 3
	mov	BYTE PTR _len$3[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+112]
	mov	WORD PTR _dist$1[ebp], cx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5784]
	mov	cl, BYTE PTR _dist$1[ebp]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	movzx	edx, WORD PTR _dist$1[ebp]
	sar	edx, 8
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+5784]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	al, BYTE PTR _len$3[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5792], edx
	mov	cx, WORD PTR _dist$1[ebp]
	sub	cx, 1
	mov	WORD PTR _dist$1[ebp], cx
	movzx	edx, BYTE PTR _len$3[ebp]
	movzx	eax, BYTE PTR __length_code[edx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+1176]
	add	dx, 1
	movzx	eax, BYTE PTR _len$3[ebp]
	movzx	ecx, BYTE PTR __length_code[eax]
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax+ecx*4+1176], dx
	movzx	ecx, WORD PTR _dist$1[ebp]
	cmp	ecx, 256				; 00000100H
	jge	SHORT $LN24@deflate_fa
	movzx	edx, WORD PTR _dist$1[ebp]
	movzx	eax, BYTE PTR __dist_code[edx]
	mov	DWORD PTR tv229[ebp], eax
	jmp	SHORT $LN25@deflate_fa
$LN24@deflate_fa:
	movzx	ecx, WORD PTR _dist$1[ebp]
	sar	ecx, 7
	movzx	edx, BYTE PTR __dist_code[ecx+256]
	mov	DWORD PTR tv229[ebp], edx
$LN25@deflate_fa:
	mov	eax, DWORD PTR tv229[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+2440]
	add	dx, 1
	mov	eax, DWORD PTR tv229[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+2440], dx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+5792]
	cmp	ecx, DWORD PTR [eax+5796]
	jne	SHORT $LN26@deflate_fa
	mov	DWORD PTR tv245[ebp], 1
	jmp	SHORT $LN27@deflate_fa
$LN26@deflate_fa:
	mov	DWORD PTR tv245[ebp], 0
$LN27@deflate_fa:
	mov	edx, DWORD PTR tv245[ebp]
	mov	DWORD PTR _bflush$[ebp], edx

; 1921 :                            s->match_length - MIN_MATCH, bflush);
; 1922 : 
; 1923 :             s->lookahead -= s->match_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+116]
	sub	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], edx

; 1924 : 
; 1925 :             /* Insert new strings in the hash table only if the match length
; 1926 :              * is not too large. This saves time but degrades compression.
; 1927 :              */
; 1928 : #ifndef FASTEST
; 1929 :             if (s->match_length <= s->max_insert_length &&

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+96]
	cmp	eax, DWORD PTR [edx+128]
	ja	$LN15@deflate_fa
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+116], 3
	jb	$LN15@deflate_fa

; 1930 :                 s->lookahead >= MIN_MATCH) {
; 1931 :                 s->match_length--; /* string at strstart already in table */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+96]
	sub	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], eax
$LN7@deflate_fa:

; 1932 :                 do {
; 1933 :                     s->strstart++;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+108], eax

; 1934 :                     INSERT_STRING(s, s->strstart, hash_head);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [eax+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx

; 1935 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1936 :                      * always MIN_MATCH bytes ahead.
; 1937 :                      */
; 1938 :                 } while (--s->match_length != 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 1
	mov	DWORD PTR tv300[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv300[ebp]
	mov	DWORD PTR [edx+96], eax
	cmp	DWORD PTR tv300[ebp], 0
	jne	$LN7@deflate_fa

; 1939 :                 s->strstart++;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], edx

; 1940 :             } else

	jmp	SHORT $LN16@deflate_fa
$LN15@deflate_fa:

; 1941 : #endif
; 1942 :             {
; 1943 :                 s->strstart += s->match_length;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+96]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+108], edx

; 1944 :                 s->match_length = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], 0

; 1945 :                 s->ins_h = s->window[s->strstart];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+ecx]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 1946 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart + 1]);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+1]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
$LN16@deflate_fa:

; 1947 : #if MIN_MATCH != 3
; 1948 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1949 : #endif
; 1950 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1951 :                  * matter since it will be recomputed at next deflate call.
; 1952 :                  */
; 1953 :             }
; 1954 :         } else {

	jmp	$LN14@deflate_fa
$LN13@deflate_fa:

; 1955 :             /* No match, output a literal byte */
; 1956 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1957 :             _tr_tally_lit(s, s->window[s->strstart], bflush);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR _cc$2[ebp], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5792]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	BYTE PTR [ecx+edx], 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5792]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5784]
	mov	BYTE PTR [edx+eax], 0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _cc$2[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	movzx	eax, BYTE PTR _cc$2[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+148]
	add	dx, 1
	movzx	eax, BYTE PTR _cc$2[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+148], dx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+5792]
	cmp	ecx, DWORD PTR [eax+5796]
	jne	SHORT $LN28@deflate_fa
	mov	DWORD PTR tv374[ebp], 1
	jmp	SHORT $LN29@deflate_fa
$LN28@deflate_fa:
	mov	DWORD PTR tv374[ebp], 0
$LN29@deflate_fa:
	mov	edx, DWORD PTR tv374[ebp]
	mov	DWORD PTR _bflush$[ebp], edx

; 1958 :             s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1959 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx
$LN14@deflate_fa:

; 1960 :         }
; 1961 :         if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN17@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN30@deflate_fa
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv395[ebp], edx
	jmp	SHORT $LN31@deflate_fa
$LN30@deflate_fa:
	mov	DWORD PTR tv395[ebp], 0
$LN31@deflate_fa:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv395[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN17@deflate_fa
	xor	eax, eax
	jmp	$LN1@deflate_fa
$LN17@deflate_fa:

; 1962 :     }

	jmp	$LN4@deflate_fa
$LN3@deflate_fa:

; 1963 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+108], 2
	jae	SHORT $LN32@deflate_fa
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR tv409[ebp], eax
	jmp	SHORT $LN33@deflate_fa
$LN32@deflate_fa:
	mov	DWORD PTR tv409[ebp], 2
$LN33@deflate_fa:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR tv409[ebp]
	mov	DWORD PTR [ecx+5812], edx

; 1964 :     if (flush == Z_FINISH) {

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN19@deflate_fa

; 1965 :         FLUSH_BLOCK(s, 1);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN34@deflate_fa
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv422[ebp], edx
	jmp	SHORT $LN35@deflate_fa
$LN34@deflate_fa:
	mov	DWORD PTR tv422[ebp], 0
$LN35@deflate_fa:
	push	1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv422[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN20@deflate_fa
	mov	eax, 2
	jmp	$LN1@deflate_fa
$LN20@deflate_fa:

; 1966 :         return finish_done;

	mov	eax, 3
	jmp	SHORT $LN1@deflate_fa
$LN19@deflate_fa:

; 1967 :     }
; 1968 :     if (s->sym_next)

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5792], 0
	je	SHORT $LN21@deflate_fa

; 1969 :         FLUSH_BLOCK(s, 0);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jl	SHORT $LN36@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR tv445[ebp], ecx
	jmp	SHORT $LN37@deflate_fa
$LN36@deflate_fa:
	mov	DWORD PTR tv445[ebp], 0
$LN37@deflate_fa:
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR tv445[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+92], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_flush_pending
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN21@deflate_fa
	xor	eax, eax
	jmp	SHORT $LN1@deflate_fa
$LN21@deflate_fa:

; 1970 :     return block_done;

	mov	eax, 1
$LN1@deflate_fa:

; 1971 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_fast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
tv426 = -60						; size = 4
tv412 = -56						; size = 4
tv406 = -52						; size = 4
tv393 = -48						; size = 4
tv389 = -44						; size = 4
tv373 = -40						; size = 4
tv292 = -36						; size = 4
tv139 = -32						; size = 4
tv71 = -28						; size = 4
_min_block$ = -24					; size = 4
_last$ = -20						; size = 4
_used$ = -16						; size = 4
_left$ = -12						; size = 4
_len$ = -8						; size = 4
_have$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC

; 1693 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 1694 :     /* Smallest worthy block size when not flushing or finishing. By default
; 1695 :      * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
; 1696 :      * large input and output buffers, the stored block size will be larger.
; 1697 :      */
; 1698 :     unsigned min_block = MIN(s->pending_buf_size - 5, s->w_size);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 5
	mov	edx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR [edx+44]
	jbe	SHORT $LN33@deflate_st
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR tv71[ebp], ecx
	jmp	SHORT $LN34@deflate_st
$LN33@deflate_st:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, 5
	mov	DWORD PTR tv71[ebp], eax
$LN34@deflate_st:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _min_block$[ebp], ecx

; 1699 : 
; 1700 :     /* Copy as many min_block or larger stored blocks directly to next_out as
; 1701 :      * possible. If flushing, copy the remaining available input to next_out as
; 1702 :      * stored blocks, if there is enough space.
; 1703 :      */
; 1704 :     unsigned len, left, have, last = 0;

	mov	DWORD PTR _last$[ebp], 0

; 1705 :     unsigned used = s->strm->avail_in;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _used$[ebp], ecx
$LN4@deflate_st:

; 1706 :     do {
; 1707 :         /* Set len to the maximum size block that we can copy directly with the
; 1708 :          * available input data and output space. Set left to how much of that
; 1709 :          * would be copied from what's left in the window.
; 1710 :          */
; 1711 :         len = MAX_STORED;       /* maximum deflate stored block length */

	mov	DWORD PTR _len$[ebp], 65535		; 0000ffffH

; 1712 :         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5820]
	add	eax, 42					; 0000002aH
	sar	eax, 3
	mov	DWORD PTR _have$[ebp], eax

; 1713 :         if (s->strm->avail_out < have)          /* need room for header */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	cmp	eax, DWORD PTR _have$[ebp]
	jae	SHORT $LN5@deflate_st

; 1714 :             break;

	jmp	$LN3@deflate_st
$LN5@deflate_st:

; 1715 :             /* maximum stored block length that will fit in avail_out: */
; 1716 :         have = s->strm->avail_out - have;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR _have$[ebp]
	mov	DWORD PTR _have$[ebp], eax

; 1717 :         left = s->strstart - s->block_start;    /* bytes left in window */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	mov	DWORD PTR _left$[ebp], eax

; 1718 :         if (len > (ulg)left + s->strm->avail_in)

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR _len$[ebp], eax
	jbe	SHORT $LN6@deflate_st

; 1719 :             len = left + s->strm->avail_in;     /* limit len to the input */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _len$[ebp], eax
$LN6@deflate_st:

; 1720 :         if (len > have)

	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _have$[ebp]
	jbe	SHORT $LN7@deflate_st

; 1721 :             len = have;                         /* limit len to the output */

	mov	edx, DWORD PTR _have$[ebp]
	mov	DWORD PTR _len$[ebp], edx
$LN7@deflate_st:

; 1722 : 
; 1723 :         /* If the stored block would be less than min_block in length, or if
; 1724 :          * unable to copy all of the available input when flushing, then try
; 1725 :          * copying to the window and the pending buffer instead. Also don't
; 1726 :          * write an empty block when flushing -- deflate() does that.
; 1727 :          */
; 1728 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||

	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR _min_block$[ebp]
	jae	SHORT $LN8@deflate_st
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN10@deflate_st
	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN9@deflate_st
$LN10@deflate_st:
	cmp	DWORD PTR _flush$[ebp], 0
	je	SHORT $LN9@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR _len$[ebp], eax
	je	SHORT $LN8@deflate_st
$LN9@deflate_st:

; 1729 :                                 flush == Z_NO_FLUSH ||
; 1730 :                                 len != left + s->strm->avail_in))
; 1731 :             break;

	jmp	$LN3@deflate_st
$LN8@deflate_st:

; 1732 : 
; 1733 :         /* Make a dummy stored block in pending to get the header bytes,
; 1734 :          * including any pending bits. This also updates the debugging counts.
; 1735 :          */
; 1736 :         last = flush == Z_FINISH && len == left + s->strm->avail_in ? 1 : 0;

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN35@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR _len$[ebp], eax
	jne	SHORT $LN35@deflate_st
	mov	DWORD PTR tv139[ebp], 1
	jmp	SHORT $LN36@deflate_st
$LN35@deflate_st:
	mov	DWORD PTR tv139[ebp], 0
$LN36@deflate_st:
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR _last$[ebp], ecx

; 1737 :         _tr_stored_block(s, (char *)0, 0L, last);

	mov	edx, DWORD PTR _last$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_stored_block
	add	esp, 16					; 00000010H

; 1738 : 
; 1739 :         /* Replace the lengths in the dummy stored block with len. */
; 1740 :         s->pending_buf[s->pending - 4] = len;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	al, BYTE PTR _len$[ebp]
	mov	BYTE PTR [ecx+edx-4], al

; 1741 :         s->pending_buf[s->pending - 3] = len >> 8;

	mov	ecx, DWORD PTR _len$[ebp]
	shr	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax-3], cl

; 1742 :         s->pending_buf[s->pending - 2] = ~len;

	mov	eax, DWORD PTR _len$[ebp]
	not	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx-2], al

; 1743 :         s->pending_buf[s->pending - 1] = ~len >> 8;

	mov	edx, DWORD PTR _len$[ebp]
	not	edx
	shr	edx, 8
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx-1], dl

; 1744 : 
; 1745 :         /* Write the stored block header bytes. */
; 1746 :         flush_pending(s->strm);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_flush_pending
	add	esp, 4

; 1747 : 
; 1748 : #ifdef ZLIB_DEBUG
; 1749 :         /* Update debugging counts for the data about to be copied. */
; 1750 :         s->compressed_len += len << 3;
; 1751 :         s->bits_sent += len << 3;
; 1752 : #endif
; 1753 : 
; 1754 :         /* Copy uncompressed bytes from the window to next_out. */
; 1755 :         if (left) {

	cmp	DWORD PTR _left$[ebp], 0
	je	$LN11@deflate_st

; 1756 :             if (left > len)

	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jbe	SHORT $LN12@deflate_st

; 1757 :                 left = len;

	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _left$[ebp], ecx
$LN12@deflate_st:

; 1758 :             zmemcpy(s->strm->next_out, s->window + s->block_start, left);

	mov	edx, DWORD PTR _left$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+92]
	push	ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1759 :             s->strm->next_out += left;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], edx

; 1760 :             s->strm->avail_out -= left;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+16], ecx

; 1761 :             s->strm->total_out += left;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+20], eax

; 1762 :             s->block_start += left;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	add	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+92], ecx

; 1763 :             len -= left;

	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _len$[ebp], eax
$LN11@deflate_st:

; 1764 :         }
; 1765 : 
; 1766 :         /* Copy uncompressed bytes directly from next_in to next_out, updating
; 1767 :          * the check value.
; 1768 :          */
; 1769 :         if (len) {

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN2@deflate_st

; 1770 :             read_buf(s->strm, s->strm->next_out, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_read_buf
	add	esp, 12					; 0000000cH

; 1771 :             s->strm->next_out += len;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+12], eax

; 1772 :             s->strm->avail_out -= len;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+16], edx

; 1773 :             s->strm->total_out += len;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+20], ecx
$LN2@deflate_st:

; 1774 :         }
; 1775 :     } while (last == 0);

	cmp	DWORD PTR _last$[ebp], 0
	je	$LN4@deflate_st
$LN3@deflate_st:

; 1776 : 
; 1777 :     /* Update the sliding window with the last s->w_size bytes of the copied
; 1778 :      * data, or append all of the copied data to the existing window if less
; 1779 :      * than s->w_size bytes were copied. Also update the number of bytes to
; 1780 :      * insert in the hash tables, in the event that deflateParams() switches to
; 1781 :      * a non-zero compression level.
; 1782 :      */
; 1783 :     used -= s->strm->avail_in;      /* number of input bytes directly copied */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _used$[ebp]
	sub	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _used$[ebp], eax

; 1784 :     if (used) {

	je	$LN14@deflate_st

; 1785 :         /* If any input was used, then no unused input remains in the window,
; 1786 :          * therefore s->block_start == s->strstart.
; 1787 :          */
; 1788 :         if (used >= s->w_size) {    /* supplant the previous history */

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _used$[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jb	SHORT $LN15@deflate_st

; 1789 :             s->matches = 2;         /* clear hash */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5808], 2

; 1790 :             zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1791 :             s->strstart = s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+108], edx

; 1792 :             s->insert = s->strstart;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+5812], edx

; 1793 :         }

	jmp	$LN16@deflate_st
$LN15@deflate_st:

; 1794 :         else {
; 1795 :             if (s->window_size - s->strstart <= used) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+60]
	sub	edx, DWORD PTR [ecx+108]
	cmp	edx, DWORD PTR _used$[ebp]
	ja	SHORT $LN17@deflate_st

; 1796 :                 /* Slide the window down. */
; 1797 :                 s->strstart -= s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], edx

; 1798 :                 zmemcpy(s->window, s->window + s->w_size, s->strstart);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+44]
	push	ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1799 :                 if (s->matches < 2)

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5808], 2
	jae	SHORT $LN18@deflate_st

; 1800 :                     s->matches++;   /* add a pending slide_hash() */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5808]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5808], ecx
$LN18@deflate_st:

; 1801 :                 if (s->insert > s->strstart)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+5812]
	cmp	edx, DWORD PTR [ecx+108]
	jbe	SHORT $LN17@deflate_st

; 1802 :                     s->insert = s->strstart;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+5812], edx
$LN17@deflate_st:

; 1803 :             }
; 1804 :             zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);

	mov	eax, DWORD PTR _used$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _used$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+108]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1805 :             s->strstart += used;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, DWORD PTR _used$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], edx

; 1806 :             s->insert += MIN(used, s->w_size - s->insert);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	sub	eax, DWORD PTR [edx+5812]
	cmp	DWORD PTR _used$[ebp], eax
	jbe	SHORT $LN37@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	sub	eax, DWORD PTR [edx+5812]
	mov	DWORD PTR tv292[ebp], eax
	jmp	SHORT $LN38@deflate_st
$LN37@deflate_st:
	mov	ecx, DWORD PTR _used$[ebp]
	mov	DWORD PTR tv292[ebp], ecx
$LN38@deflate_st:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5812]
	add	eax, DWORD PTR tv292[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5812], eax
$LN16@deflate_st:

; 1807 :         }
; 1808 :         s->block_start = s->strstart;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+92], ecx
$LN14@deflate_st:

; 1809 :     }
; 1810 :     if (s->high_water < s->strstart)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+5824]
	cmp	ecx, DWORD PTR [eax+108]
	jae	SHORT $LN20@deflate_st

; 1811 :         s->high_water = s->strstart;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+5824], ecx
$LN20@deflate_st:

; 1812 : 
; 1813 :     /* If the last block was written to next_out, then done. */
; 1814 :     if (last)

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN21@deflate_st

; 1815 :         return finish_done;

	mov	eax, 3
	jmp	$LN1@deflate_st
$LN21@deflate_st:

; 1816 : 
; 1817 :     /* If flushing and all input has been consumed, then done. */
; 1818 :     if (flush != Z_NO_FLUSH && flush != Z_FINISH &&
; 1819 :         s->strm->avail_in == 0 && (long)s->strstart == s->block_start)

	cmp	DWORD PTR _flush$[ebp], 0
	je	SHORT $LN22@deflate_st
	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN22@deflate_st
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN22@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	cmp	eax, DWORD PTR [edx+92]
	jne	SHORT $LN22@deflate_st

; 1820 :         return block_done;

	mov	eax, 1
	jmp	$LN1@deflate_st
$LN22@deflate_st:

; 1821 : 
; 1822 :     /* Fill the window with any remaining input. */
; 1823 :     have = s->window_size - s->strstart;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	sub	eax, DWORD PTR [edx+108]
	mov	DWORD PTR _have$[ebp], eax

; 1824 :     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR _have$[ebp]
	jbe	$LN23@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+92]
	cmp	eax, DWORD PTR [edx+44]
	jl	$LN23@deflate_st

; 1825 :         /* Slide the window down. */
; 1826 :         s->block_start -= s->w_size;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+92]
	sub	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+92], eax

; 1827 :         s->strstart -= s->w_size;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1828 :         zmemcpy(s->window, s->window + s->w_size, s->strstart);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+44]
	push	eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1829 :         if (s->matches < 2)

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5808], 2
	jae	SHORT $LN24@deflate_st

; 1830 :             s->matches++;           /* add a pending slide_hash() */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5808]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5808], eax
$LN24@deflate_st:

; 1831 :         have += s->w_size;          /* more space now */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _have$[ebp]
	add	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _have$[ebp], eax

; 1832 :         if (s->insert > s->strstart)

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+5812]
	cmp	eax, DWORD PTR [edx+108]
	jbe	SHORT $LN23@deflate_st

; 1833 :             s->insert = s->strstart;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+5812], eax
$LN23@deflate_st:

; 1834 :     }
; 1835 :     if (have > s->strm->avail_in)

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _have$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jbe	SHORT $LN26@deflate_st

; 1836 :         have = s->strm->avail_in;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _have$[ebp], eax
$LN26@deflate_st:

; 1837 :     if (have) {

	cmp	DWORD PTR _have$[ebp], 0
	je	SHORT $LN27@deflate_st

; 1838 :         read_buf(s->strm, s->window + s->strstart, have);

	mov	ecx, DWORD PTR _have$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+108]
	push	eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_read_buf
	add	esp, 12					; 0000000cH

; 1839 :         s->strstart += have;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, DWORD PTR _have$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], edx

; 1840 :         s->insert += MIN(have, s->w_size - s->insert);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	sub	eax, DWORD PTR [edx+5812]
	cmp	DWORD PTR _have$[ebp], eax
	jbe	SHORT $LN39@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	sub	eax, DWORD PTR [edx+5812]
	mov	DWORD PTR tv373[ebp], eax
	jmp	SHORT $LN40@deflate_st
$LN39@deflate_st:
	mov	ecx, DWORD PTR _have$[ebp]
	mov	DWORD PTR tv373[ebp], ecx
$LN40@deflate_st:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5812]
	add	eax, DWORD PTR tv373[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5812], eax
$LN27@deflate_st:

; 1841 :     }
; 1842 :     if (s->high_water < s->strstart)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+5824]
	cmp	ecx, DWORD PTR [eax+108]
	jae	SHORT $LN28@deflate_st

; 1843 :         s->high_water = s->strstart;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR [edx+5824], ecx
$LN28@deflate_st:

; 1844 : 
; 1845 :     /* There was not enough avail_out to write a complete worthy or flushed
; 1846 :      * stored block to next_out. Write a stored block to pending instead, if we
; 1847 :      * have enough input for a worthy block, or if flushing and there is enough
; 1848 :      * room for the remaining input as a stored block in the pending buffer.
; 1849 :      */
; 1850 :     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5820]
	add	eax, 42					; 0000002aH
	sar	eax, 3
	mov	DWORD PTR _have$[ebp], eax

; 1851 :         /* maximum stored block length that will fit in pending: */
; 1852 :     have = MIN(s->pending_buf_size - have, MAX_STORED);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR _have$[ebp]
	cmp	edx, 65535				; 0000ffffH
	jbe	SHORT $LN41@deflate_st
	mov	DWORD PTR tv389[ebp], 65535		; 0000ffffH
	jmp	SHORT $LN42@deflate_st
$LN41@deflate_st:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _have$[ebp]
	mov	DWORD PTR tv389[ebp], ecx
$LN42@deflate_st:
	mov	edx, DWORD PTR tv389[ebp]
	mov	DWORD PTR _have$[ebp], edx

; 1853 :     min_block = MIN(have, s->w_size);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _have$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jbe	SHORT $LN43@deflate_st
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR tv393[ebp], eax
	jmp	SHORT $LN44@deflate_st
$LN43@deflate_st:
	mov	ecx, DWORD PTR _have$[ebp]
	mov	DWORD PTR tv393[ebp], ecx
$LN44@deflate_st:
	mov	edx, DWORD PTR tv393[ebp]
	mov	DWORD PTR _min_block$[ebp], edx

; 1854 :     left = s->strstart - s->block_start;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR _left$[ebp], edx

; 1855 :     if (left >= min_block ||

	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _min_block$[ebp]
	jae	SHORT $LN30@deflate_st
	cmp	DWORD PTR _left$[ebp], 0
	jne	SHORT $LN31@deflate_st
	cmp	DWORD PTR _flush$[ebp], 4
	jne	$LN29@deflate_st
$LN31@deflate_st:
	cmp	DWORD PTR _flush$[ebp], 0
	je	$LN29@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+4], 0
	jne	$LN29@deflate_st
	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _have$[ebp]
	ja	$LN29@deflate_st
$LN30@deflate_st:

; 1856 :         ((left || flush == Z_FINISH) && flush != Z_NO_FLUSH &&
; 1857 :          s->strm->avail_in == 0 && left <= have)) {
; 1858 :         len = MIN(left, have);

	mov	ecx, DWORD PTR _left$[ebp]
	cmp	ecx, DWORD PTR _have$[ebp]
	jbe	SHORT $LN45@deflate_st
	mov	edx, DWORD PTR _have$[ebp]
	mov	DWORD PTR tv406[ebp], edx
	jmp	SHORT $LN46@deflate_st
$LN45@deflate_st:
	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR tv406[ebp], eax
$LN46@deflate_st:
	mov	ecx, DWORD PTR tv406[ebp]
	mov	DWORD PTR _len$[ebp], ecx

; 1859 :         last = flush == Z_FINISH && s->strm->avail_in == 0 &&

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN47@deflate_st
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN47@deflate_st
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _left$[ebp]
	jne	SHORT $LN47@deflate_st
	mov	DWORD PTR tv412[ebp], 1
	jmp	SHORT $LN48@deflate_st
$LN47@deflate_st:
	mov	DWORD PTR tv412[ebp], 0
$LN48@deflate_st:
	mov	edx, DWORD PTR tv412[ebp]
	mov	DWORD PTR _last$[ebp], edx

; 1860 :                len == left ? 1 : 0;
; 1861 :         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);

	mov	eax, DWORD PTR _last$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+92]
	push	eax
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_stored_block
	add	esp, 16					; 00000010H

; 1862 :         s->block_start += len;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+92], ecx

; 1863 :         flush_pending(s->strm);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
$LN29@deflate_st:

; 1864 :     }
; 1865 : 
; 1866 :     /* We've done all we can with the available input and output. */
; 1867 :     return last ? finish_started : need_more;

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN49@deflate_st
	mov	DWORD PTR tv426[ebp], 2
	jmp	SHORT $LN50@deflate_st
$LN49@deflate_st:
	mov	DWORD PTR tv426[ebp], 0
$LN50@deflate_st:
	mov	eax, DWORD PTR tv426[ebp]
$LN1@deflate_st:

; 1868 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_stored ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_n$ = -24						; size = 4
_curr$1 = -20						; size = 4
_str$2 = -16						; size = 4
_wsize$ = -12						; size = 4
_init$3 = -8						; size = 4
_more$ = -4						; size = 4
_s$ = 8							; size = 4
_fill_window PROC

; 1529 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 1530 :     unsigned n;
; 1531 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1532 :     uInt wsize = s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _wsize$[ebp], ecx
$LN4@fill_windo:

; 1533 : 
; 1534 :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 1535 : 
; 1536 :     do {
; 1537 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	sub	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _s$[ebp]
	sub	ecx, DWORD PTR [edx+108]
	mov	DWORD PTR _more$[ebp], ecx

; 1538 : 
; 1539 :         /* Deal with !@#$% 64K limit: */
; 1540 :         if (sizeof(int) <= 2) {

	xor	eax, eax
	je	SHORT $LN7@fill_windo

; 1541 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {

	cmp	DWORD PTR _more$[ebp], 0
	jne	SHORT $LN8@fill_windo
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+108], 0
	jne	SHORT $LN8@fill_windo
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 0
	jne	SHORT $LN8@fill_windo

; 1542 :                 more = wsize;

	mov	eax, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _more$[ebp], eax
	jmp	SHORT $LN7@fill_windo
$LN8@fill_windo:

; 1543 : 
; 1544 :             } else if (more == (unsigned)(-1)) {

	cmp	DWORD PTR _more$[ebp], -1
	jne	SHORT $LN7@fill_windo

; 1545 :                 /* Very unlikely, but possible on 16 bit machine if
; 1546 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1547 :                  */
; 1548 :                 more--;

	mov	ecx, DWORD PTR _more$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _more$[ebp], ecx
$LN7@fill_windo:

; 1549 :             }
; 1550 :         }
; 1551 : 
; 1552 :         /* If the window is almost full and there is insufficient lookahead,
; 1553 :          * move the upper half to the lower one to make room in the upper half.
; 1554 :          */
; 1555 :         if (s->strstart >= wsize + MAX_DIST(s)) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _wsize$[ebp]
	lea	edx, DWORD PTR [ecx+eax-262]
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], edx
	jb	$LN11@fill_windo

; 1556 : 
; 1557 :             zmemcpy(s->window, s->window + wsize, (unsigned)wsize - more);

	mov	ecx, DWORD PTR _wsize$[ebp]
	sub	ecx, DWORD PTR _more$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	add	eax, DWORD PTR _wsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1558 :             s->match_start -= wsize;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+112], ecx

; 1559 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1560 :             s->block_start -= (long) wsize;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+92], ecx

; 1561 :             if (s->insert > s->strstart)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+5812]
	cmp	edx, DWORD PTR [ecx+108]
	jbe	SHORT $LN12@fill_windo

; 1562 :                 s->insert = s->strstart;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+5812], edx
$LN12@fill_windo:

; 1563 :             slide_hash(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_slide_hash
	add	esp, 4

; 1564 :             more += wsize;

	mov	ecx, DWORD PTR _more$[ebp]
	add	ecx, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _more$[ebp], ecx
$LN11@fill_windo:

; 1565 :         }
; 1566 :         if (s->strm->avail_in == 0) break;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN13@fill_windo
	jmp	$LN3@fill_windo
$LN13@fill_windo:

; 1567 : 
; 1568 :         /* If there was no sliding:
; 1569 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1570 :          *    more == window_size - lookahead - strstart
; 1571 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1572 :          * => more >= window_size - 2*WSIZE + 2
; 1573 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1574 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1575 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1576 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1577 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1578 :          */
; 1579 :         Assert(more >= 2, "more < 2");
; 1580 : 
; 1581 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

	mov	ecx, DWORD PTR _more$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+116]
	push	eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_read_buf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _n$[ebp], eax

; 1582 :         s->lookahead += n;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	add	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 1583 : 
; 1584 :         /* Initialize the hash value now that we have some input: */
; 1585 :         if (s->lookahead + s->insert >= MIN_MATCH) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+5812]
	cmp	eax, 3
	jb	$LN2@fill_windo

; 1586 :             uInt str = s->strstart - s->insert;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+5812]
	mov	DWORD PTR _str$2[ebp], ecx

; 1587 :             s->ins_h = s->window[str];

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _str$2[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+72], edx

; 1588 :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	mov	ecx, DWORD PTR [edx+88]
	shl	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR _str$2[ebp]
	movzx	edx, BYTE PTR [edx+ecx+1]
	xor	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	and	eax, DWORD PTR [ecx+84]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], eax
$LN5@fill_windo:

; 1589 : #if MIN_MATCH != 3
; 1590 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1591 : #endif
; 1592 :             while (s->insert) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5812], 0
	je	$LN2@fill_windo

; 1593 :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	mov	ecx, DWORD PTR [edx+88]
	shl	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR _str$2[ebp]
	movzx	edx, BYTE PTR [edx+ecx+2]
	xor	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	and	eax, DWORD PTR [ecx+84]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], eax

; 1594 : #ifndef FASTEST
; 1595 :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _str$2[ebp]
	and	esi, DWORD PTR [edx+52]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+64]
	mov	ax, WORD PTR [eax+ecx*2]
	mov	WORD PTR [edx+esi*2], ax

; 1596 : #endif
; 1597 :                 s->head[s->ins_h] = (Pos)str;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	ax, WORD PTR _str$2[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 1598 :                 str++;

	mov	ecx, DWORD PTR _str$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _str$2[ebp], ecx

; 1599 :                 s->insert--;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5812]
	sub	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5812], eax

; 1600 :                 if (s->lookahead + s->insert < MIN_MATCH)

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+5812]
	cmp	eax, 3
	jae	SHORT $LN15@fill_windo

; 1601 :                     break;

	jmp	SHORT $LN2@fill_windo
$LN15@fill_windo:

; 1602 :             }

	jmp	$LN5@fill_windo
$LN2@fill_windo:

; 1603 :         }
; 1604 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1605 :          * but this is not important since only literal bytes will be emitted.
; 1606 :          */
; 1607 : 
; 1608 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 262		; 00000106H
	jae	SHORT $LN3@fill_windo
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+4], 0
	jne	$LN4@fill_windo
$LN3@fill_windo:

; 1609 : 
; 1610 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1611 :      * written, then zero those bytes in order to avoid memory check reports of
; 1612 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1613 :      * the longest match routines.  Update the high water mark for the next
; 1614 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1615 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1616 :      */
; 1617 :     if (s->high_water < s->window_size) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+5824]
	cmp	ecx, DWORD PTR [eax+60]
	jae	$LN1@fill_windo

; 1618 :         ulg curr = s->strstart + (ulg)(s->lookahead);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+116]
	mov	DWORD PTR _curr$1[ebp], eax

; 1619 :         ulg init;
; 1620 : 
; 1621 :         if (s->high_water < curr) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5824]
	cmp	eax, DWORD PTR _curr$1[ebp]
	jae	SHORT $LN18@fill_windo

; 1622 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1623 :              * bytes or up to end of window, whichever is less.
; 1624 :              */
; 1625 :             init = s->window_size - curr;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	sub	edx, DWORD PTR _curr$1[ebp]
	mov	DWORD PTR _init$3[ebp], edx

; 1626 :             if (init > WIN_INIT)

	cmp	DWORD PTR _init$3[ebp], 258		; 00000102H
	jbe	SHORT $LN20@fill_windo

; 1627 :                 init = WIN_INIT;

	mov	DWORD PTR _init$3[ebp], 258		; 00000102H
$LN20@fill_windo:

; 1628 :             zmemzero(s->window + curr, (unsigned)init);

	mov	eax, DWORD PTR _init$3[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	add	edx, DWORD PTR _curr$1[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1629 :             s->high_water = curr + init;

	mov	eax, DWORD PTR _curr$1[ebp]
	add	eax, DWORD PTR _init$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5824], eax

; 1630 :         }

	jmp	$LN1@fill_windo
$LN18@fill_windo:

; 1631 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

	mov	edx, DWORD PTR _curr$1[ebp]
	add	edx, 258				; 00000102H
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5824], edx
	jae	SHORT $LN1@fill_windo

; 1632 :             /* High water mark at or above current data, but below current data
; 1633 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1634 :              * to end of window, whichever is less.
; 1635 :              */
; 1636 :             init = (ulg)curr + WIN_INIT - s->high_water;

	mov	ecx, DWORD PTR _curr$1[ebp]
	add	ecx, 258				; 00000102H
	mov	edx, DWORD PTR _s$[ebp]
	sub	ecx, DWORD PTR [edx+5824]
	mov	DWORD PTR _init$3[ebp], ecx

; 1637 :             if (init > s->window_size - s->high_water)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+60]
	sub	edx, DWORD PTR [ecx+5824]
	cmp	DWORD PTR _init$3[ebp], edx
	jbe	SHORT $LN22@fill_windo

; 1638 :                 init = s->window_size - s->high_water;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+60]
	sub	edx, DWORD PTR [ecx+5824]
	mov	DWORD PTR _init$3[ebp], edx
$LN22@fill_windo:

; 1639 :             zmemzero(s->window + s->high_water, (unsigned)init);

	mov	eax, DWORD PTR _init$3[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+5824]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1640 :             s->high_water += init;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5824]
	add	edx, DWORD PTR _init$3[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5824], edx
$LN1@fill_windo:

; 1641 :         }
; 1642 :     }
; 1643 : 
; 1644 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1645 :            "not enough room for search");
; 1646 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_fill_window ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
tv84 = -24						; size = 4
tv73 = -20						; size = 4
_wsize$ = -16						; size = 4
_m$ = -12						; size = 4
_n$ = -8						; size = 4
_p$ = -4						; size = 4
_s$ = 8							; size = 4
_slide_hash PROC

; 200  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 201  :     unsigned n, m;
; 202  :     Posf *p;
; 203  :     uInt wsize = s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _wsize$[ebp], ecx

; 204  : 
; 205  :     n = s->hash_size;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR _n$[ebp], eax

; 206  :     p = &s->head[n];

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _n$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _p$[ebp], ecx
$LN4@slide_hash:

; 207  :     do {
; 208  :         m = *--p;

	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _m$[ebp], ecx

; 209  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

	mov	edx, DWORD PTR _m$[ebp]
	cmp	edx, DWORD PTR _wsize$[ebp]
	jb	SHORT $LN9@slide_hash
	mov	eax, DWORD PTR _m$[ebp]
	sub	eax, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN10@slide_hash
$LN9@slide_hash:
	mov	DWORD PTR tv73[ebp], 0
$LN10@slide_hash:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR tv73[ebp]
	mov	WORD PTR [ecx], dx

; 210  :     } while (--n);

	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	jne	SHORT $LN4@slide_hash

; 211  :     n = wsize;

	mov	ecx, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _n$[ebp], ecx

; 212  : #ifndef FASTEST
; 213  :     p = &s->prev[n];

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _n$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _p$[ebp], edx
$LN7@slide_hash:

; 214  :     do {
; 215  :         m = *--p;

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _m$[ebp], edx

; 216  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _wsize$[ebp]
	jb	SHORT $LN11@slide_hash
	mov	ecx, DWORD PTR _m$[ebp]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN12@slide_hash
$LN11@slide_hash:
	mov	DWORD PTR tv84[ebp], 0
$LN12@slide_hash:
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR tv84[ebp]
	mov	WORD PTR [edx], ax

; 217  :         /* If n is not on any hash chain, prev[n] is garbage but
; 218  :          * its value will never be used.
; 219  :          */
; 220  :     } while (--n);

	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	jne	SHORT $LN7@slide_hash

; 221  : #endif
; 222  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_slide_hash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateStateCheck PROC

; 391  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 392  :     deflate_state *s;
; 393  :     if (strm == Z_NULL ||
; 394  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN3@deflateSta
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN3@deflateSta
	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN2@deflateSta
$LN3@deflateSta:

; 395  :         return 1;

	mov	eax, 1
	jmp	SHORT $LN1@deflateSta
$LN2@deflateSta:

; 396  :     s = strm->state;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _s$[ebp], eax

; 397  :     if (s == Z_NULL || s->strm != strm || (s->status != INIT_STATE &&

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN5@deflateSta
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _strm$[ebp]
	jne	SHORT $LN5@deflateSta
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 42			; 0000002aH
	je	SHORT $LN4@deflateSta
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+4], 57			; 00000039H
	je	SHORT $LN4@deflateSta
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 69			; 00000045H
	je	SHORT $LN4@deflateSta
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 73			; 00000049H
	je	SHORT $LN4@deflateSta
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+4], 91			; 0000005bH
	je	SHORT $LN4@deflateSta
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 103			; 00000067H
	je	SHORT $LN4@deflateSta
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 113			; 00000071H
	je	SHORT $LN4@deflateSta
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+4], 666			; 0000029aH
	je	SHORT $LN4@deflateSta
$LN5@deflateSta:

; 398  : #ifdef GZIP
; 399  :                                            s->status != GZIP_STATE &&
; 400  : #endif
; 401  :                                            s->status != EXTRA_STATE &&
; 402  :                                            s->status != NAME_STATE &&
; 403  :                                            s->status != COMMENT_STATE &&
; 404  :                                            s->status != HCRC_STATE &&
; 405  :                                            s->status != BUSY_STATE &&
; 406  :                                            s->status != FINISH_STATE))
; 407  :         return 1;

	mov	eax, 1
	jmp	SHORT $LN1@deflateSta
$LN4@deflateSta:

; 408  :     return 0;

	xor	eax, eax
$LN1@deflateSta:

; 409  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_deflateStateCheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
tv95 = -12						; size = 4
tv83 = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateResetKeep@4 PROC

; 505  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 506  :     deflate_state *s;
; 507  : 
; 508  :     if (deflateStateCheck(strm)) {

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@deflateRes

; 509  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateRes
$LN2@deflateRes:

; 510  :     }
; 511  : 
; 512  :     strm->total_in = strm->total_out = 0;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+8], 0

; 513  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], 0

; 514  :     strm->data_type = Z_UNKNOWN;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+44], 2

; 515  : 
; 516  :     s = (deflate_state *)strm->state;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _s$[ebp], eax

; 517  :     s->pending = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 518  :     s->pending_out = s->pending_buf;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+16], ecx

; 519  : 
; 520  :     if (s->wrap < 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jge	SHORT $LN3@deflateRes

; 521  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	neg	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN3@deflateRes:

; 522  :     }
; 523  :     s->status =

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 2
	jne	SHORT $LN5@deflateRes
	mov	DWORD PTR tv83[ebp], 57			; 00000039H
	jmp	SHORT $LN6@deflateRes
$LN5@deflateRes:
	mov	DWORD PTR tv83[ebp], 42			; 0000002aH
$LN6@deflateRes:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR [ecx+4], edx

; 524  : #ifdef GZIP
; 525  :         s->wrap == 2 ? GZIP_STATE :
; 526  : #endif
; 527  :         INIT_STATE;
; 528  :     strm->adler =

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 2
	jne	SHORT $LN7@deflateRes
	push	0
	push	0
	push	0
	call	_crc32@12
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN8@deflateRes
$LN7@deflateRes:
	push	0
	push	0
	push	0
	call	_adler32@12
	mov	DWORD PTR tv95[ebp], eax
$LN8@deflateRes:
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR tv95[ebp]
	mov	DWORD PTR [ecx+48], edx

; 529  : #ifdef GZIP
; 530  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 531  : #endif
; 532  :         adler32(0L, Z_NULL, 0);
; 533  :     s->last_flush = -2;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], -2			; fffffffeH

; 534  : 
; 535  :     _tr_init(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_init
	add	esp, 4

; 536  : 
; 537  :     return Z_OK;

	xor	eax, eax
$LN1@deflateRes:

; 538  : }

	mov	esp, ebp
	pop	ebp
	ret	4
_deflateResetKeep@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_wrap$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_@32 PROC

; 247  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 248  :     deflate_state *s;
; 249  :     int wrap = 1;

	mov	DWORD PTR _wrap$[ebp], 1

; 250  :     static const char my_version[] = ZLIB_VERSION;
; 251  : 
; 252  :     if (version == Z_NULL || version[0] != my_version[0] ||

	cmp	DWORD PTR _version$[ebp], 0
	je	SHORT $LN3@deflateIni
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _version$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	ecx, BYTE PTR ?my_version@?1??deflateInit2_@@9@9[edx]
	cmp	eax, ecx
	jne	SHORT $LN3@deflateIni
	cmp	DWORD PTR _stream_size$[ebp], 56	; 00000038H
	je	SHORT $LN2@deflateIni
$LN3@deflateIni:

; 253  :         stream_size != sizeof(z_stream)) {
; 254  :         return Z_VERSION_ERROR;

	mov	eax, -6					; fffffffaH
	jmp	$LN1@deflateIni
$LN2@deflateIni:

; 255  :     }
; 256  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	jne	SHORT $LN4@deflateIni
	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateIni
$LN4@deflateIni:

; 257  : 
; 258  :     strm->msg = Z_NULL;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+24], 0

; 259  :     if (strm->zalloc == (alloc_func)0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN5@deflateIni

; 260  : #ifdef Z_SOLO
; 261  :         return Z_STREAM_ERROR;
; 262  : #else
; 263  :         strm->zalloc = zcalloc;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+32], OFFSET _zcalloc

; 264  :         strm->opaque = (voidpf)0;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+40], 0
$LN5@deflateIni:

; 265  : #endif
; 266  :     }
; 267  :     if (strm->zfree == (free_func)0)

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN6@deflateIni

; 268  : #ifdef Z_SOLO
; 269  :         return Z_STREAM_ERROR;
; 270  : #else
; 271  :         strm->zfree = zcfree;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+36], OFFSET _zcfree
$LN6@deflateIni:

; 272  : #endif
; 273  : 
; 274  : #ifdef FASTEST
; 275  :     if (level != 0) level = 1;
; 276  : #else
; 277  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

	cmp	DWORD PTR _level$[ebp], -1
	jne	SHORT $LN7@deflateIni
	mov	DWORD PTR _level$[ebp], 6
$LN7@deflateIni:

; 278  : #endif
; 279  : 
; 280  :     if (windowBits < 0) { /* suppress zlib wrapper */

	cmp	DWORD PTR _windowBits$[ebp], 0
	jge	SHORT $LN8@deflateIni

; 281  :         wrap = 0;

	mov	DWORD PTR _wrap$[ebp], 0

; 282  :         if (windowBits < -15)

	cmp	DWORD PTR _windowBits$[ebp], -15	; fffffff1H
	jge	SHORT $LN10@deflateIni

; 283  :             return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateIni
$LN10@deflateIni:

; 284  :         windowBits = -windowBits;

	mov	edx, DWORD PTR _windowBits$[ebp]
	neg	edx
	mov	DWORD PTR _windowBits$[ebp], edx

; 285  :     }

	jmp	SHORT $LN9@deflateIni
$LN8@deflateIni:

; 286  : #ifdef GZIP
; 287  :     else if (windowBits > 15) {

	cmp	DWORD PTR _windowBits$[ebp], 15		; 0000000fH
	jle	SHORT $LN9@deflateIni

; 288  :         wrap = 2;       /* write gzip wrapper instead */

	mov	DWORD PTR _wrap$[ebp], 2

; 289  :         windowBits -= 16;

	mov	eax, DWORD PTR _windowBits$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _windowBits$[ebp], eax
$LN9@deflateIni:

; 290  :     }
; 291  : #endif
; 292  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 293  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 294  :         strategy < 0 || strategy > Z_FIXED || (windowBits == 8 && wrap != 1)) {

	cmp	DWORD PTR _memLevel$[ebp], 1
	jl	SHORT $LN13@deflateIni
	cmp	DWORD PTR _memLevel$[ebp], 9
	jg	SHORT $LN13@deflateIni
	cmp	DWORD PTR _method$[ebp], 8
	jne	SHORT $LN13@deflateIni
	cmp	DWORD PTR _windowBits$[ebp], 8
	jl	SHORT $LN13@deflateIni
	cmp	DWORD PTR _windowBits$[ebp], 15		; 0000000fH
	jg	SHORT $LN13@deflateIni
	cmp	DWORD PTR _level$[ebp], 0
	jl	SHORT $LN13@deflateIni
	cmp	DWORD PTR _level$[ebp], 9
	jg	SHORT $LN13@deflateIni
	cmp	DWORD PTR _strategy$[ebp], 0
	jl	SHORT $LN13@deflateIni
	cmp	DWORD PTR _strategy$[ebp], 4
	jg	SHORT $LN13@deflateIni
	cmp	DWORD PTR _windowBits$[ebp], 8
	jne	SHORT $LN12@deflateIni
	cmp	DWORD PTR _wrap$[ebp], 1
	je	SHORT $LN12@deflateIni
$LN13@deflateIni:

; 295  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateIni
$LN12@deflateIni:

; 296  :     }
; 297  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

	cmp	DWORD PTR _windowBits$[ebp], 8
	jne	SHORT $LN14@deflateIni
	mov	DWORD PTR _windowBits$[ebp], 9
$LN14@deflateIni:

; 298  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

	push	5828					; 000016c4H
	push	1
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _s$[ebp], eax

; 299  :     if (s == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN15@deflateIni
	mov	eax, -4					; fffffffcH
	jmp	$LN1@deflateIni
$LN15@deflateIni:

; 300  :     strm->state = (struct internal_state FAR *)s;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+28], eax

; 301  :     s->strm = strm;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx], edx

; 302  :     s->status = INIT_STATE;     /* to pass state test in deflateReset() */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 42			; 0000002aH

; 303  : 
; 304  :     s->wrap = wrap;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _wrap$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 305  :     s->gzhead = Z_NULL;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+28], 0

; 306  :     s->w_bits = (uInt)windowBits;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _windowBits$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 307  :     s->w_size = 1 << s->w_bits;

	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+48]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+44], edx

; 308  :     s->w_mask = s->w_size - 1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+52], edx

; 309  : 
; 310  :     s->hash_bits = (uInt)memLevel + 7;

	mov	ecx, DWORD PTR _memLevel$[ebp]
	add	ecx, 7
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+80], ecx

; 311  :     s->hash_size = 1 << s->hash_bits;

	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+80]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+76], edx

; 312  :     s->hash_mask = s->hash_size - 1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	sub	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+84], edx

; 313  :     s->hash_shift =  ((s->hash_bits + MIN_MATCH-1) / MIN_MATCH);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+80]
	add	eax, 2
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+88], eax

; 314  : 
; 315  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

	push	2
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 316  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

	push	2
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+64], eax

; 317  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

	push	2
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 318  : 
; 319  :     s->high_water = 0;      /* nothing written to s->window yet */

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5824], 0

; 320  : 
; 321  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	mov	ecx, DWORD PTR _memLevel$[ebp]
	add	ecx, 6
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5788], eax

; 322  : 
; 323  :     /* We overlay pending_buf and sym_buf. This works since the average size
; 324  :      * for length/distance pairs over any compressed block is assured to be 31
; 325  :      * bits or less.
; 326  :      *
; 327  :      * Analysis: The longest fixed codes are a length code of 8 bits plus 5
; 328  :      * extra bits, for lengths 131 to 257. The longest fixed distance codes are
; 329  :      * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
; 330  :      * possible fixed-codes length/distance pair is then 31 bits total.
; 331  :      *
; 332  :      * sym_buf starts one-fourth of the way into pending_buf. So there are
; 333  :      * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
; 334  :      * in sym_buf is three bytes -- two for the distance and one for the
; 335  :      * literal/length. As each symbol is consumed, the pointer to the next
; 336  :      * sym_buf value to read moves forward three bytes. From that symbol, up to
; 337  :      * 31 bits are written to pending_buf. The closest the written pending_buf
; 338  :      * bits gets to the next sym_buf symbol to read is just before the last
; 339  :      * code is written. At that time, 31*(n - 2) bits have been written, just
; 340  :      * after 24*(n - 2) bits have been consumed from sym_buf. sym_buf starts at
; 341  :      * 8*n bits into pending_buf. (Note that the symbol buffer fills when n - 1
; 342  :      * symbols are written.) The closest the writing gets to what is unread is
; 343  :      * then n + 14 bits. Here n is lit_bufsize, which is 16384 by default, and
; 344  :      * can range from 128 to 32768.
; 345  :      *
; 346  :      * Therefore, at a minimum, there are 142 bits of space between what is
; 347  :      * written and what is read in the overlain buffers, so the symbols cannot
; 348  :      * be overwritten by the compressed data. That space is actually 139 bits,
; 349  :      * due to the three-bit fixed-code block header.
; 350  :      *
; 351  :      * That covers the case where either Z_FIXED is specified, forcing fixed
; 352  :      * codes, or when the use of fixed codes is chosen, because that choice
; 353  :      * results in a smaller compressed block than dynamic codes. That latter
; 354  :      * condition then assures that the above analysis also covers all dynamic
; 355  :      * blocks. A dynamic-code block will only be chosen to be emitted if it has
; 356  :      * fewer bits than a fixed-code block would for the same set of symbols.
; 357  :      * Therefore its average symbol length is assured to be less than 31. So
; 358  :      * the compressed data for a dynamic block also cannot overwrite the
; 359  :      * symbols from which it is being constructed.
; 360  :      */
; 361  : 
; 362  :     s->pending_buf = (uchf *) ZALLOC(strm, s->lit_bufsize, 4);

	push	4
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+8], eax

; 363  :     s->pending_buf_size = (ulg)s->lit_bufsize * 4;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	shl	ecx, 2
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 364  : 
; 365  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN17@deflateIni
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN17@deflateIni
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN17@deflateIni
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN16@deflateIni
$LN17@deflateIni:

; 366  :         s->pending_buf == Z_NULL) {
; 367  :         s->status = FINISH_STATE;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 666			; 0000029aH

; 368  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _z_errmsg[eax]
	mov	DWORD PTR [ecx+24], edx

; 369  :         deflateEnd (strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateEnd@4

; 370  :         return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN1@deflateIni
$LN16@deflateIni:

; 371  :     }
; 372  :     s->sym_buf = s->pending_buf + s->lit_bufsize;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+5788]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5784], edx

; 373  :     s->sym_end = (s->lit_bufsize - 1) * 3;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	sub	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5796], ecx

; 374  :     /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
; 375  :      * on 16 bit machines and because stored blocks are restricted to
; 376  :      * 64K-1 bytes.
; 377  :      */
; 378  : 
; 379  :     s->level = level;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _level$[ebp]
	mov	DWORD PTR [eax+132], ecx

; 380  :     s->strategy = strategy;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _strategy$[ebp]
	mov	DWORD PTR [edx+136], eax

; 381  :     s->method = (Byte)method;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR _method$[ebp]
	mov	BYTE PTR [ecx+36], dl

; 382  : 
; 383  :     return deflateReset(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateReset@4
$LN1@deflateIni:

; 384  : }

	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_deflateInit2_@32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_@16 PROC

; 230  : {

	push	ebp
	mov	ebp, esp

; 231  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,

	mov	eax, DWORD PTR _stream_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _version$[ebp]
	push	ecx
	push	0
	push	8
	push	15					; 0000000fH
	push	8
	mov	edx, DWORD PTR _level$[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateInit2_@32

; 232  :                          Z_DEFAULT_STRATEGY, version, stream_size);
; 233  :     /* To do: ignore strm->next_in if we use it as window */
; 234  : }

	pop	ebp
	ret	16					; 00000010H
_deflateInit_@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader@8 PROC

; 556  : {

	push	ebp
	mov	ebp, esp

; 557  :     if (deflateStateCheck(strm) || strm->state->wrap != 2)

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@deflateSet
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+24], 2
	je	SHORT $LN2@deflateSet
$LN3@deflateSet:

; 558  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@deflateSet
$LN2@deflateSet:

; 559  :     strm->state->gzhead = head;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _head$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 560  :     return Z_OK;

	xor	eax, eax
$LN1@deflateSet:

; 561  : }

	pop	ebp
	ret	8
_deflateSetHeader@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_put$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime@12 PROC

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 583  :     deflate_state *s;
; 584  :     int put;
; 585  : 
; 586  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@deflatePri
	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflatePri
$LN5@deflatePri:

; 587  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 588  :     if (bits < 0 || bits > 16 ||

	cmp	DWORD PTR _bits$[ebp], 0
	jl	SHORT $LN7@deflatePri
	cmp	DWORD PTR _bits$[ebp], 16		; 00000010H
	jg	SHORT $LN7@deflatePri
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 2
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5784], ecx
	jae	SHORT $LN4@deflatePri
$LN7@deflatePri:

; 589  :         s->sym_buf < s->pending_out + ((Buf_size + 7) >> 3))
; 590  :         return Z_BUF_ERROR;

	mov	eax, -5					; fffffffbH
	jmp	$LN1@deflatePri
$LN4@deflatePri:

; 591  :     do {
; 592  :         put = Buf_size - s->bi_valid;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, 16					; 00000010H
	sub	ecx, DWORD PTR [eax+5820]
	mov	DWORD PTR _put$[ebp], ecx

; 593  :         if (put > bits)

	mov	edx, DWORD PTR _put$[ebp]
	cmp	edx, DWORD PTR _bits$[ebp]
	jle	SHORT $LN8@deflatePri

; 594  :             put = bits;

	mov	eax, DWORD PTR _bits$[ebp]
	mov	DWORD PTR _put$[ebp], eax
$LN8@deflatePri:

; 595  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

	mov	edx, 1
	mov	ecx, DWORD PTR _put$[ebp]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	movzx	ecx, dx
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+5816]
	or	eax, ecx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax

; 596  :         s->bi_valid += put;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5820]
	add	eax, DWORD PTR _put$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax

; 597  :         _tr_flush_bits(s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_bits
	add	esp, 4

; 598  :         value >>= put;

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _put$[ebp]
	sar	eax, cl
	mov	DWORD PTR _value$[ebp], eax

; 599  :         bits -= put;

	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, DWORD PTR _put$[ebp]
	mov	DWORD PTR _bits$[ebp], ecx

; 600  :     } while (bits);

	jne	$LN4@deflatePri

; 601  :     return Z_OK;

	xor	eax, eax
$LN1@deflatePri:

; 602  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflatePrime@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_pending$ = 12						; size = 4
_bits$ = 16						; size = 4
_deflatePending@12 PROC

; 568  : {

	push	ebp
	mov	ebp, esp

; 569  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@deflatePen
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@deflatePen
$LN2@deflatePen:

; 570  :     if (pending != Z_NULL)

	cmp	DWORD PTR _pending$[ebp], 0
	je	SHORT $LN3@deflatePen

; 571  :         *pending = strm->state->pending;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _pending$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax], ecx
$LN3@deflatePen:

; 572  :     if (bits != Z_NULL)

	cmp	DWORD PTR _bits$[ebp], 0
	je	SHORT $LN4@deflatePen

; 573  :         *bits = strm->state->bi_valid;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _bits$[ebp]
	mov	edx, DWORD PTR [eax+5820]
	mov	DWORD PTR [ecx], edx
$LN4@deflatePen:

; 574  :     return Z_OK;

	xor	eax, eax
$LN1@deflatePen:

; 575  : }

	pop	ebp
	ret	12					; 0000000cH
_deflatePending@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
tv147 = -44						; size = 4
tv139 = -40						; size = 4
tv162 = -36						; size = 4
tv89 = -32						; size = 4
tv82 = -28						; size = 4
_storelen$ = -24					; size = 4
_fixedlen$ = -20					; size = 4
tv86 = -16						; size = 4
_str$1 = -12						; size = 4
_s$ = -8						; size = 4
_wraplen$ = -4						; size = 4
_strm$ = 8						; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound@8 PROC

; 699  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 700  :     deflate_state *s;
; 701  :     uLong fixedlen, storelen, wraplen;
; 702  : 
; 703  :     /* upper bound for fixed blocks with 9-bit literals and length 255
; 704  :        (memLevel == 2, which is the lowest that may not use stored blocks) --
; 705  :        ~13% overhead plus a small constant */
; 706  :     fixedlen = sourceLen + (sourceLen >> 3) + (sourceLen >> 8) +

	mov	eax, DWORD PTR _sourceLen$[ebp]
	shr	eax, 3
	add	eax, DWORD PTR _sourceLen$[ebp]
	mov	ecx, DWORD PTR _sourceLen$[ebp]
	shr	ecx, 8
	add	eax, ecx
	mov	edx, DWORD PTR _sourceLen$[ebp]
	shr	edx, 9
	lea	eax, DWORD PTR [eax+edx+4]
	mov	DWORD PTR _fixedlen$[ebp], eax

; 707  :                (sourceLen >> 9) + 4;
; 708  : 
; 709  :     /* upper bound for stored blocks with length 127 (memLevel == 1) --
; 710  :        ~4% overhead plus a small constant */
; 711  :     storelen = sourceLen + (sourceLen >> 5) + (sourceLen >> 7) +

	mov	ecx, DWORD PTR _sourceLen$[ebp]
	shr	ecx, 5
	add	ecx, DWORD PTR _sourceLen$[ebp]
	mov	edx, DWORD PTR _sourceLen$[ebp]
	shr	edx, 7
	add	ecx, edx
	mov	eax, DWORD PTR _sourceLen$[ebp]
	shr	eax, 11					; 0000000bH
	lea	ecx, DWORD PTR [ecx+eax+7]
	mov	DWORD PTR _storelen$[ebp], ecx

; 712  :                (sourceLen >> 11) + 7;
; 713  : 
; 714  :     /* if can't get parameters, return larger bound plus a zlib wrapper */
; 715  :     if (deflateStateCheck(strm))

	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@deflateBou

; 716  :         return (fixedlen > storelen ? fixedlen : storelen) + 6;

	mov	eax, DWORD PTR _fixedlen$[ebp]
	cmp	eax, DWORD PTR _storelen$[ebp]
	jbe	SHORT $LN23@deflateBou
	mov	ecx, DWORD PTR _fixedlen$[ebp]
	mov	DWORD PTR tv82[ebp], ecx
	jmp	SHORT $LN24@deflateBou
$LN23@deflateBou:
	mov	edx, DWORD PTR _storelen$[ebp]
	mov	DWORD PTR tv82[ebp], edx
$LN24@deflateBou:
	mov	eax, DWORD PTR tv82[ebp]
	add	eax, 6
	jmp	$LN1@deflateBou
$LN10@deflateBou:

; 717  : 
; 718  :     /* compute wrapper length */
; 719  :     s = strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 720  :     switch (s->wrap) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR tv86[ebp], eax
	cmp	DWORD PTR tv86[ebp], 0
	je	SHORT $LN11@deflateBou
	cmp	DWORD PTR tv86[ebp], 1
	je	SHORT $LN12@deflateBou
	cmp	DWORD PTR tv86[ebp], 2
	je	SHORT $LN13@deflateBou
	jmp	$LN19@deflateBou
$LN11@deflateBou:

; 721  :     case 0:                                 /* raw deflate */
; 722  :         wraplen = 0;

	mov	DWORD PTR _wraplen$[ebp], 0

; 723  :         break;

	jmp	$LN2@deflateBou
$LN12@deflateBou:

; 724  :     case 1:                                 /* zlib wrapper */
; 725  :         wraplen = 6 + (s->strstart ? 4 : 0);

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+108], 0
	je	SHORT $LN25@deflateBou
	mov	DWORD PTR tv89[ebp], 4
	jmp	SHORT $LN26@deflateBou
$LN25@deflateBou:
	mov	DWORD PTR tv89[ebp], 0
$LN26@deflateBou:
	mov	edx, DWORD PTR tv89[ebp]
	add	edx, 6
	mov	DWORD PTR _wraplen$[ebp], edx

; 726  :         break;

	jmp	$LN2@deflateBou
$LN13@deflateBou:

; 727  : #ifdef GZIP
; 728  :     case 2:                                 /* gzip wrapper */
; 729  :         wraplen = 18;

	mov	DWORD PTR _wraplen$[ebp], 18		; 00000012H

; 730  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	$LN14@deflateBou

; 731  :             Bytef *str;
; 732  :             if (s->gzhead->extra != Z_NULL)

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN15@deflateBou

; 733  :                 wraplen += 2 + s->gzhead->extra_len;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _wraplen$[ebp]
	lea	ecx, DWORD PTR [eax+edx+2]
	mov	DWORD PTR _wraplen$[ebp], ecx
$LN15@deflateBou:

; 734  :             str = s->gzhead->name;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _str$1[ebp], ecx

; 735  :             if (str != Z_NULL)

	cmp	DWORD PTR _str$1[ebp], 0
	je	SHORT $LN16@deflateBou
$LN6@deflateBou:

; 736  :                 do {
; 737  :                     wraplen++;

	mov	edx, DWORD PTR _wraplen$[ebp]
	add	edx, 1
	mov	DWORD PTR _wraplen$[ebp], edx

; 738  :                 } while (*str++);

	mov	eax, DWORD PTR _str$1[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv139[ebp], ecx
	mov	edx, DWORD PTR _str$1[ebp]
	add	edx, 1
	mov	DWORD PTR _str$1[ebp], edx
	cmp	DWORD PTR tv139[ebp], 0
	jne	SHORT $LN6@deflateBou
$LN16@deflateBou:

; 739  :             str = s->gzhead->comment;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _str$1[ebp], edx

; 740  :             if (str != Z_NULL)

	cmp	DWORD PTR _str$1[ebp], 0
	je	SHORT $LN17@deflateBou
$LN9@deflateBou:

; 741  :                 do {
; 742  :                     wraplen++;

	mov	eax, DWORD PTR _wraplen$[ebp]
	add	eax, 1
	mov	DWORD PTR _wraplen$[ebp], eax

; 743  :                 } while (*str++);

	mov	ecx, DWORD PTR _str$1[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR tv147[ebp], edx
	mov	eax, DWORD PTR _str$1[ebp]
	add	eax, 1
	mov	DWORD PTR _str$1[ebp], eax
	cmp	DWORD PTR tv147[ebp], 0
	jne	SHORT $LN9@deflateBou
$LN17@deflateBou:

; 744  :             if (s->gzhead->hcrc)

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN14@deflateBou

; 745  :                 wraplen += 2;

	mov	eax, DWORD PTR _wraplen$[ebp]
	add	eax, 2
	mov	DWORD PTR _wraplen$[ebp], eax
$LN14@deflateBou:

; 746  :         }
; 747  :         break;

	jmp	SHORT $LN2@deflateBou
$LN19@deflateBou:

; 748  : #endif
; 749  :     default:                                /* for compiler happiness */
; 750  :         wraplen = 6;

	mov	DWORD PTR _wraplen$[ebp], 6
$LN2@deflateBou:

; 751  :     }
; 752  : 
; 753  :     /* if not default parameters, return one of the conservative bounds */
; 754  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+48], 15			; 0000000fH
	jne	SHORT $LN21@deflateBou
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+80], 15			; 0000000fH
	je	SHORT $LN20@deflateBou
$LN21@deflateBou:

; 755  :         return (s->w_bits <= s->hash_bits ? fixedlen : storelen) + wraplen;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+48]
	cmp	edx, DWORD PTR [ecx+80]
	ja	SHORT $LN27@deflateBou
	mov	eax, DWORD PTR _fixedlen$[ebp]
	mov	DWORD PTR tv162[ebp], eax
	jmp	SHORT $LN28@deflateBou
$LN27@deflateBou:
	mov	ecx, DWORD PTR _storelen$[ebp]
	mov	DWORD PTR tv162[ebp], ecx
$LN28@deflateBou:
	mov	eax, DWORD PTR tv162[ebp]
	add	eax, DWORD PTR _wraplen$[ebp]
	jmp	SHORT $LN1@deflateBou
$LN20@deflateBou:

; 756  : 
; 757  :     /* default settings: return tight bound for that case -- ~0.03% overhead
; 758  :        plus a small constant */
; 759  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

	mov	edx, DWORD PTR _sourceLen$[ebp]
	shr	edx, 12					; 0000000cH
	add	edx, DWORD PTR _sourceLen$[ebp]
	mov	eax, DWORD PTR _sourceLen$[ebp]
	shr	eax, 14					; 0000000eH
	add	edx, eax
	mov	ecx, DWORD PTR _sourceLen$[ebp]
	shr	ecx, 25					; 00000019H
	add	edx, DWORD PTR _wraplen$[ebp]
	lea	eax, DWORD PTR [ecx+edx+7]
$LN1@deflateBou:

; 760  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 761  : }

	mov	esp, ebp
	pop	ebp
	ret	8
_deflateBound@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune@20 PROC

; 660  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 661  :     deflate_state *s;
; 662  : 
; 663  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@deflateTun
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@deflateTun
$LN2@deflateTun:

; 664  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 665  :     s->good_match = (uInt)good_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _good_length$[ebp]
	mov	DWORD PTR [eax+140], ecx

; 666  :     s->max_lazy_match = (uInt)max_lazy;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _max_lazy$[ebp]
	mov	DWORD PTR [edx+128], eax

; 667  :     s->nice_match = nice_length;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _nice_length$[ebp]
	mov	DWORD PTR [ecx+144], edx

; 668  :     s->max_chain_length = (uInt)max_chain;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _max_chain$[ebp]
	mov	DWORD PTR [eax+124], ecx

; 669  :     return Z_OK;

	xor	eax, eax
$LN1@deflateTun:

; 670  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_deflateTune@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_func$ = -12						; size = 4
_err$1 = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams@12 PROC

; 609  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 610  :     deflate_state *s;
; 611  :     compress_func func;
; 612  : 
; 613  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@deflatePar
	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflatePar
$LN5@deflatePar:

; 614  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 615  : 
; 616  : #ifdef FASTEST
; 617  :     if (level != 0) level = 1;
; 618  : #else
; 619  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

	cmp	DWORD PTR _level$[ebp], -1
	jne	SHORT $LN6@deflatePar
	mov	DWORD PTR _level$[ebp], 6
$LN6@deflatePar:

; 620  : #endif
; 621  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

	cmp	DWORD PTR _level$[ebp], 0
	jl	SHORT $LN8@deflatePar
	cmp	DWORD PTR _level$[ebp], 9
	jg	SHORT $LN8@deflatePar
	cmp	DWORD PTR _strategy$[ebp], 0
	jl	SHORT $LN8@deflatePar
	cmp	DWORD PTR _strategy$[ebp], 4
	jle	SHORT $LN7@deflatePar
$LN8@deflatePar:

; 622  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflatePar
$LN7@deflatePar:

; 623  :     }
; 624  :     func = configuration_table[s->level].func;

	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	mov	edx, DWORD PTR _configuration_table[ecx+8]
	mov	DWORD PTR _func$[ebp], edx

; 625  : 
; 626  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _strategy$[ebp]
	cmp	ecx, DWORD PTR [eax+136]
	jne	SHORT $LN10@deflatePar
	imul	edx, DWORD PTR _level$[ebp], 12
	mov	eax, DWORD PTR _func$[ebp]
	cmp	eax, DWORD PTR _configuration_table[edx+8]
	je	SHORT $LN9@deflatePar
$LN10@deflatePar:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+40], -2			; fffffffeH
	je	SHORT $LN9@deflatePar

; 627  :         s->last_flush != -2) {
; 628  :         /* Flush the last buffer: */
; 629  :         int err = deflate(strm, Z_BLOCK);

	push	5
	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_deflate@8
	mov	DWORD PTR _err$1[ebp], eax

; 630  :         if (err == Z_STREAM_ERROR)

	cmp	DWORD PTR _err$1[ebp], -2		; fffffffeH
	jne	SHORT $LN11@deflatePar

; 631  :             return err;

	mov	eax, DWORD PTR _err$1[ebp]
	jmp	$LN1@deflatePar
$LN11@deflatePar:

; 632  :         if (strm->avail_in || (s->strstart - s->block_start) + s->lookahead)

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN13@deflatePar
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+116]
	je	SHORT $LN9@deflatePar
$LN13@deflatePar:

; 633  :             return Z_BUF_ERROR;

	mov	eax, -5					; fffffffbH
	jmp	$LN1@deflatePar
$LN9@deflatePar:

; 634  :     }
; 635  :     if (s->level != level) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+132]
	cmp	eax, DWORD PTR _level$[ebp]
	je	$LN14@deflatePar

; 636  :         if (s->level == 0 && s->matches != 0) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+132], 0
	jne	SHORT $LN15@deflatePar
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5808], 0
	je	SHORT $LN15@deflatePar

; 637  :             if (s->matches == 1)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5808], 1
	jne	SHORT $LN4@deflatePar

; 638  :                 slide_hash(s);

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_slide_hash
	add	esp, 4
	jmp	SHORT $LN17@deflatePar
$LN4@deflatePar:

; 639  :             else
; 640  :                 CLEAR_HASH(s);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	xor	ecx, ecx
	mov	WORD PTR [edx+eax*2-2], cx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+76]
	lea	ecx, DWORD PTR [eax+eax-2]
	push	ecx
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	jne	SHORT $LN4@deflatePar
$LN17@deflatePar:

; 641  :             s->matches = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5808], 0
$LN15@deflatePar:

; 642  :         }
; 643  :         s->level = level;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _level$[ebp]
	mov	DWORD PTR [eax+132], ecx

; 644  :         s->max_lazy_match   = configuration_table[level].max_lazy;

	imul	edx, DWORD PTR _level$[ebp], 12
	movzx	eax, WORD PTR _configuration_table[edx+2]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+128], eax

; 645  :         s->good_match       = configuration_table[level].good_length;

	imul	edx, DWORD PTR _level$[ebp], 12
	movzx	eax, WORD PTR _configuration_table[edx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+140], eax

; 646  :         s->nice_match       = configuration_table[level].nice_length;

	imul	edx, DWORD PTR _level$[ebp], 12
	movzx	eax, WORD PTR _configuration_table[edx+4]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+144], eax

; 647  :         s->max_chain_length = configuration_table[level].max_chain;

	imul	edx, DWORD PTR _level$[ebp], 12
	movzx	eax, WORD PTR _configuration_table[edx+6]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+124], eax
$LN14@deflatePar:

; 648  :     }
; 649  :     s->strategy = strategy;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _strategy$[ebp]
	mov	DWORD PTR [edx+136], eax

; 650  :     return Z_OK;

	xor	eax, eax
$LN1@deflatePar:

; 651  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflateParams@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateReset@4 PROC

; 543  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 544  :     int ret;
; 545  : 
; 546  :     ret = deflateResetKeep(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateResetKeep@4
	mov	DWORD PTR _ret$[ebp], eax

; 547  :     if (ret == Z_OK)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@deflateRes

; 548  :         lm_init(strm->state);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_lm_init
	add	esp, 4
$LN2@deflateRes:

; 549  :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 550  : }

	mov	esp, ebp
	pop	ebp
	ret	4
_deflateReset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_ss$ = -8						; size = 4
_ds$ = -4						; size = 4
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_deflateCopy@8 PROC

; 1159 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1160 : #ifdef MAXSEG_64K
; 1161 :     return Z_STREAM_ERROR;
; 1162 : #else
; 1163 :     deflate_state *ds;
; 1164 :     deflate_state *ss;
; 1165 : 
; 1166 : 
; 1167 :     if (deflateStateCheck(source) || dest == Z_NULL) {

	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@deflateCop
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN2@deflateCop
$LN3@deflateCop:

; 1168 :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateCop
$LN2@deflateCop:

; 1169 :     }
; 1170 : 
; 1171 :     ss = source->state;

	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _ss$[ebp], edx

; 1172 : 
; 1173 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

	push	56					; 00000038H
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1174 : 
; 1175 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

	push	5828					; 000016c4H
	push	1
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ds$[ebp], eax

; 1176 :     if (ds == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _ds$[ebp], 0
	jne	SHORT $LN4@deflateCop
	mov	eax, -4					; fffffffcH
	jmp	$LN1@deflateCop
$LN4@deflateCop:

; 1177 :     dest->state = (struct internal_state FAR *) ds;

	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 1178 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

	push	5828					; 000016c4H
	mov	edx, DWORD PTR _ss$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1179 :     ds->strm = dest;

	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx], edx

; 1180 : 
; 1181 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

	push	2
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 1182 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

	push	2
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [edx+64], eax

; 1183 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

	push	2
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 1184 :     ds->pending_buf = (uchf *) ZALLOC(dest, ds->lit_bufsize, 4);

	push	4
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+5788]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1185 : 
; 1186 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||

	mov	eax, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN6@deflateCop
	mov	ecx, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN6@deflateCop
	mov	edx, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN6@deflateCop
	mov	eax, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN5@deflateCop
$LN6@deflateCop:

; 1187 :         ds->pending_buf == Z_NULL) {
; 1188 :         deflateEnd (dest);

	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_deflateEnd@4

; 1189 :         return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	$LN1@deflateCop
$LN5@deflateCop:

; 1190 :     }
; 1191 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1192 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+44]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _ss$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1193 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+44]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _ss$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1194 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+76]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _ss$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1195 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _ss$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1196 : 
; 1197 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR _ss$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _ds$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 1198 :     ds->sym_buf = ds->pending_buf + ds->lit_bufsize;

	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _ds$[ebp]
	add	edx, DWORD PTR [eax+5788]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+5784], edx

; 1199 : 
; 1200 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

	mov	edx, DWORD PTR _ds$[ebp]
	add	edx, 148				; 00000094H
	mov	eax, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [eax+2840], edx

; 1201 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

	mov	ecx, DWORD PTR _ds$[ebp]
	add	ecx, 2440				; 00000988H
	mov	edx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [edx+2852], ecx

; 1202 :     ds->bl_desc.dyn_tree = ds->bl_tree;

	mov	eax, DWORD PTR _ds$[ebp]
	add	eax, 2684				; 00000a7cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+2864], eax

; 1203 : 
; 1204 :     return Z_OK;

	xor	eax, eax
$LN1@deflateCop:

; 1205 : #endif /* MAXSEG_64K */
; 1206 : }

	mov	esp, ebp
	pop	ebp
	ret	8
_deflateCopy@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_len$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateGetDictionary@12 PROC

; 485  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 486  :     deflate_state *s;
; 487  :     uInt len;
; 488  : 
; 489  :     if (deflateStateCheck(strm))

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@deflateGet

; 490  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@deflateGet
$LN2@deflateGet:

; 491  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 492  :     len = s->strstart + s->lookahead;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+116]
	mov	DWORD PTR _len$[ebp], ecx

; 493  :     if (len > s->w_size)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jbe	SHORT $LN3@deflateGet

; 494  :         len = s->w_size;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _len$[ebp], eax
$LN3@deflateGet:

; 495  :     if (dictionary != Z_NULL && len)

	cmp	DWORD PTR _dictionary$[ebp], 0
	je	SHORT $LN4@deflateGet
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN4@deflateGet

; 496  :         zmemcpy(dictionary, s->window + s->strstart + s->lookahead - len, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+116]
	sub	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	eax, DWORD PTR _dictionary$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@deflateGet:

; 497  :     if (dictLength != Z_NULL)

	cmp	DWORD PTR _dictLength$[ebp], 0
	je	SHORT $LN5@deflateGet

; 498  :         *dictLength = len;

	mov	ecx, DWORD PTR _dictLength$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@deflateGet:

; 499  :     return Z_OK;

	xor	eax, eax
$LN1@deflateGet:

; 500  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflateGetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_avail$ = -24						; size = 4
_next$ = -20						; size = 4
_n$ = -16						; size = 4
_wrap$ = -12						; size = 4
_str$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary@12 PROC

; 416  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 417  :     deflate_state *s;
; 418  :     uInt str, n;
; 419  :     int wrap;
; 420  :     unsigned avail;
; 421  :     z_const unsigned char *next;
; 422  : 
; 423  :     if (deflateStateCheck(strm) || dictionary == Z_NULL)

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN11@deflateSet
	cmp	DWORD PTR _dictionary$[ebp], 0
	jne	SHORT $LN10@deflateSet
$LN11@deflateSet:

; 424  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateSet
$LN10@deflateSet:

; 425  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 426  :     wrap = s->wrap;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _wrap$[ebp], ecx

; 427  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

	cmp	DWORD PTR _wrap$[ebp], 2
	je	SHORT $LN13@deflateSet
	cmp	DWORD PTR _wrap$[ebp], 1
	jne	SHORT $LN14@deflateSet
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 42			; 0000002aH
	jne	SHORT $LN13@deflateSet
$LN14@deflateSet:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	je	SHORT $LN12@deflateSet
$LN13@deflateSet:

; 428  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateSet
$LN12@deflateSet:

; 429  : 
; 430  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 431  :     if (wrap == 1)

	cmp	DWORD PTR _wrap$[ebp], 1
	jne	SHORT $LN15@deflateSet

; 432  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

	mov	ecx, DWORD PTR _dictLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dictionary$[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_adler32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN15@deflateSet:

; 433  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+24], 0

; 434  : 
; 435  :     /* if dictionary would fill window, just replace the history */
; 436  :     if (dictLength >= s->w_size) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _dictLength$[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jb	SHORT $LN16@deflateSet

; 437  :         if (wrap == 0) {            /* already empty otherwise */

	cmp	DWORD PTR _wrap$[ebp], 0
	jne	SHORT $LN17@deflateSet
$LN4@deflateSet:

; 438  :             CLEAR_HASH(s);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2-2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	lea	edx, DWORD PTR [ecx+ecx-2]
	push	edx
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
	xor	edx, edx
	jne	SHORT $LN4@deflateSet

; 439  :             s->strstart = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], 0

; 440  :             s->block_start = 0L;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+92], 0

; 441  :             s->insert = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5812], 0
$LN17@deflateSet:

; 442  :         }
; 443  :         dictionary += dictLength - s->w_size;  /* use the tail */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _dictLength$[ebp]
	sub	ecx, DWORD PTR [eax+44]
	add	ecx, DWORD PTR _dictionary$[ebp]
	mov	DWORD PTR _dictionary$[ebp], ecx

; 444  :         dictLength = s->w_size;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _dictLength$[ebp], eax
$LN16@deflateSet:

; 445  :     }
; 446  : 
; 447  :     /* insert dictionary into window and hash */
; 448  :     avail = strm->avail_in;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _avail$[ebp], edx

; 449  :     next = strm->next_in;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$[ebp], ecx

; 450  :     strm->avail_in = dictLength;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _dictLength$[ebp]
	mov	DWORD PTR [edx+4], eax

; 451  :     strm->next_in = (z_const Bytef *)dictionary;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _dictionary$[ebp]
	mov	DWORD PTR [ecx], edx

; 452  :     fill_window(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_fill_window
	add	esp, 4
$LN5@deflateSet:

; 453  :     while (s->lookahead >= MIN_MATCH) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+116], 3
	jb	$LN6@deflateSet

; 454  :         str = s->strstart;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR _str$[ebp], eax

; 455  :         n = s->lookahead - (MIN_MATCH-1);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	sub	edx, 2
	mov	DWORD PTR _n$[ebp], edx
$LN9@deflateSet:

; 456  :         do {
; 457  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR _str$[ebp]
	movzx	ecx, BYTE PTR [ecx+eax+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx

; 458  : #ifndef FASTEST
; 459  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _str$[ebp]
	and	esi, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [ecx+esi*2], dx

; 460  : #endif
; 461  :             s->head[s->ins_h] = (Pos)str;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	dx, WORD PTR _str$[ebp]
	mov	WORD PTR [eax+ecx*2], dx

; 462  :             str++;

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, 1
	mov	DWORD PTR _str$[ebp], eax

; 463  :         } while (--n);

	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	jne	SHORT $LN9@deflateSet

; 464  :         s->strstart = str;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR [edx+108], eax

; 465  :         s->lookahead = MIN_MATCH-1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], 2

; 466  :         fill_window(s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_fill_window
	add	esp, 4

; 467  :     }

	jmp	$LN5@deflateSet
$LN6@deflateSet:

; 468  :     s->strstart += s->lookahead;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+116]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 469  :     s->block_start = (long)s->strstart;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR [ecx+92], eax

; 470  :     s->insert = s->lookahead;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	DWORD PTR [ecx+5812], eax

; 471  :     s->lookahead = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], 0

; 472  :     s->match_length = s->prev_length = MIN_MATCH-1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+120], 2
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 2

; 473  :     s->match_available = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+104], 0

; 474  :     strm->next_in = next;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx], eax

; 475  :     strm->avail_in = avail;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _avail$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 476  :     s->wrap = wrap;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _wrap$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 477  :     return Z_OK;

	xor	eax, eax
$LN1@deflateSet:

; 478  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflateSetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
_status$ = -8						; size = 4
tv144 = -4						; size = 4
_strm$ = 8						; size = 4
_deflateEnd@4 PROC

; 1132 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1133 :     int status;
; 1134 : 
; 1135 :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@deflateEnd
	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateEnd
$LN2@deflateEnd:

; 1136 : 
; 1137 :     status = strm->state->status;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _status$[ebp], eax

; 1138 : 
; 1139 :     /* Deallocate in reverse order of allocations: */
; 1140 :     TRY_FREE(strm, strm->state->pending_buf);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN3@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN3@deflateEnd:

; 1141 :     TRY_FREE(strm, strm->state->head);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN4@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN4@deflateEnd:

; 1142 :     TRY_FREE(strm, strm->state->prev);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN5@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN5@deflateEnd:

; 1143 :     TRY_FREE(strm, strm->state->window);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN6@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN6@deflateEnd:

; 1144 : 
; 1145 :     ZFREE(strm, strm->state);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8

; 1146 :     strm->state = Z_NULL;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 1147 : 
; 1148 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

	cmp	DWORD PTR _status$[ebp], 113		; 00000071H
	jne	SHORT $LN8@deflateEnd
	mov	DWORD PTR tv144[ebp], -3		; fffffffdH
	jmp	SHORT $LN9@deflateEnd
$LN8@deflateEnd:
	mov	DWORD PTR tv144[ebp], 0
$LN9@deflateEnd:
	mov	eax, DWORD PTR tv144[ebp]
$LN1@deflateEnd:

; 1149 : }

	mov	esp, ebp
	pop	ebp
	ret	4
_deflateEnd@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\Code\Alastor\Thirdparty\zlib\deflate.c
_TEXT	SEGMENT
tv871 = -108						; size = 4
tv724 = -104						; size = 4
tv723 = -100						; size = 4
tv722 = -96						; size = 4
_val$1 = -92						; size = 4
_val$2 = -88						; size = 4
tv385 = -84						; size = 4
tv384 = -80						; size = 4
tv321 = -76						; size = 4
tv316 = -72						; size = 4
tv311 = -68						; size = 4
tv306 = -64						; size = 4
tv302 = -60						; size = 4
tv278 = -56						; size = 4
tv277 = -52						; size = 4
tv135 = -48						; size = 4
_old_flush$ = -44					; size = 4
tv131 = -40						; size = 4
_copy$3 = -36						; size = 4
_level_flags$4 = -32					; size = 4
_bstate$5 = -28						; size = 4
_left$6 = -24						; size = 4
_beg$7 = -20						; size = 4
_beg$8 = -16						; size = 4
_beg$9 = -12						; size = 4
_header$10 = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate@8 PROC

; 818  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 819  :     int old_flush; /* value of flush param for previous deflate call */
; 820  :     deflate_state *s;
; 821  : 
; 822  :     if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateStateCheck
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN32@deflate
	cmp	DWORD PTR _flush$[ebp], 5
	jg	SHORT $LN32@deflate
	cmp	DWORD PTR _flush$[ebp], 0
	jge	SHORT $LN31@deflate
$LN32@deflate:

; 823  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflate
$LN31@deflate:

; 824  :     }
; 825  :     s = strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _s$[ebp], edx

; 826  : 
; 827  :     if (strm->next_out == Z_NULL ||
; 828  :         (strm->avail_in != 0 && strm->next_in == Z_NULL) ||

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN34@deflate
	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN35@deflate
	mov	edx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN34@deflate
$LN35@deflate:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 666			; 0000029aH
	jne	SHORT $LN33@deflate
	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN33@deflate
$LN34@deflate:

; 829  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {
; 830  :         ERR_RETURN(strm, Z_STREAM_ERROR);

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _z_errmsg[ecx]
	mov	DWORD PTR [edx+24], eax
	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflate
$LN33@deflate:

; 831  :     }
; 832  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN36@deflate
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _z_errmsg[eax]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, -5					; fffffffbH
	jmp	$LN1@deflate
$LN36@deflate:

; 833  : 
; 834  :     old_flush = s->last_flush;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _old_flush$[ebp], ecx

; 835  :     s->last_flush = flush;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _flush$[ebp]
	mov	DWORD PTR [edx+40], eax

; 836  : 
; 837  :     /* Flush as much pending output as possible */
; 838  :     if (s->pending != 0) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN37@deflate

; 839  :         flush_pending(strm);

	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_flush_pending
	add	esp, 4

; 840  :         if (strm->avail_out == 0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN39@deflate

; 841  :             /* Since avail_out is 0, deflate will be called again with
; 842  :              * more output space, but possibly with both pending and
; 843  :              * avail_in equal to zero. There won't be anything to do,
; 844  :              * but this is not an error situation so make sure we
; 845  :              * return OK instead of BUF_ERROR at next call of deflate:
; 846  :              */
; 847  :             s->last_flush = -1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+40], -1

; 848  :             return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN39@deflate:

; 849  :         }

	jmp	SHORT $LN38@deflate
$LN37@deflate:

; 850  : 
; 851  :     /* Make sure there is something to do and avoid duplicate consecutive
; 852  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 853  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 854  :      */
; 855  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

	mov	edx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN38@deflate
	cmp	DWORD PTR _flush$[ebp], 4
	jle	SHORT $LN102@deflate
	mov	DWORD PTR tv131[ebp], 9
	jmp	SHORT $LN103@deflate
$LN102@deflate:
	mov	DWORD PTR tv131[ebp], 0
$LN103@deflate:
	cmp	DWORD PTR _old_flush$[ebp], 4
	jle	SHORT $LN104@deflate
	mov	DWORD PTR tv135[ebp], 9
	jmp	SHORT $LN105@deflate
$LN104@deflate:
	mov	DWORD PTR tv135[ebp], 0
$LN105@deflate:
	mov	eax, DWORD PTR _flush$[ebp]
	shl	eax, 1
	sub	eax, DWORD PTR tv131[ebp]
	mov	ecx, DWORD PTR _old_flush$[ebp]
	shl	ecx, 1
	sub	ecx, DWORD PTR tv135[ebp]
	cmp	eax, ecx
	jg	SHORT $LN38@deflate
	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN38@deflate

; 856  :                flush != Z_FINISH) {
; 857  :         ERR_RETURN(strm, Z_BUF_ERROR);

	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _z_errmsg[eax]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, -5					; fffffffbH
	jmp	$LN1@deflate
$LN38@deflate:

; 858  :     }
; 859  : 
; 860  :     /* User must not provide more input after the first FINISH: */
; 861  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 666			; 0000029aH
	jne	SHORT $LN41@deflate
	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN41@deflate

; 862  :         ERR_RETURN(strm, Z_BUF_ERROR);

	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _z_errmsg[eax]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, -5					; fffffffbH
	jmp	$LN1@deflate
$LN41@deflate:

; 863  :     }
; 864  : 
; 865  :     /* Write the header */
; 866  :     if (s->status == INIT_STATE && s->wrap == 0)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 42			; 0000002aH
	jne	SHORT $LN42@deflate
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN42@deflate

; 867  :         s->status = BUSY_STATE;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+4], 113			; 00000071H
$LN42@deflate:

; 868  :     if (s->status == INIT_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 42			; 0000002aH
	jne	$LN43@deflate

; 869  :         /* zlib header */
; 870  :         uInt header = (Z_DEFLATED + ((s->w_bits - 8) << 4)) << 8;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, 8
	shl	edx, 4
	add	edx, 8
	shl	edx, 8
	mov	DWORD PTR _header$10[ebp], edx

; 871  :         uInt level_flags;
; 872  : 
; 873  :         if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 2
	jge	SHORT $LN46@deflate
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+132], 2
	jge	SHORT $LN44@deflate
$LN46@deflate:

; 874  :             level_flags = 0;

	mov	DWORD PTR _level_flags$4[ebp], 0
	jmp	SHORT $LN45@deflate
$LN44@deflate:

; 875  :         else if (s->level < 6)

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+132], 6
	jge	SHORT $LN47@deflate

; 876  :             level_flags = 1;

	mov	DWORD PTR _level_flags$4[ebp], 1
	jmp	SHORT $LN45@deflate
$LN47@deflate:

; 877  :         else if (s->level == 6)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 6
	jne	SHORT $LN49@deflate

; 878  :             level_flags = 2;

	mov	DWORD PTR _level_flags$4[ebp], 2
	jmp	SHORT $LN45@deflate
$LN49@deflate:

; 879  :         else
; 880  :             level_flags = 3;

	mov	DWORD PTR _level_flags$4[ebp], 3
$LN45@deflate:

; 881  :         header |= (level_flags << 6);

	mov	ecx, DWORD PTR _level_flags$4[ebp]
	shl	ecx, 6
	or	ecx, DWORD PTR _header$10[ebp]
	mov	DWORD PTR _header$10[ebp], ecx

; 882  :         if (s->strstart != 0) header |= PRESET_DICT;

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+108], 0
	je	SHORT $LN51@deflate
	mov	eax, DWORD PTR _header$10[ebp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR _header$10[ebp], eax
$LN51@deflate:

; 883  :         header += 31 - (header % 31);

	mov	eax, DWORD PTR _header$10[ebp]
	xor	edx, edx
	mov	ecx, 31					; 0000001fH
	div	ecx
	mov	eax, 31					; 0000001fH
	sub	eax, edx
	add	eax, DWORD PTR _header$10[ebp]
	mov	DWORD PTR _header$10[ebp], eax

; 884  : 
; 885  :         putShortMSB(s, header);

	mov	ecx, DWORD PTR _header$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_putShortMSB
	add	esp, 8

; 886  : 
; 887  :         /* Save the adler32 of the preset dictionary: */
; 888  :         if (s->strstart != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN52@deflate

; 889  :             putShortMSB(s, (uInt)(strm->adler >> 16));

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	shr	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_putShortMSB
	add	esp, 8

; 890  :             putShortMSB(s, (uInt)(strm->adler & 0xffff));

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	and	edx, 65535				; 0000ffffH
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_putShortMSB
	add	esp, 8
$LN52@deflate:

; 891  :         }
; 892  :         strm->adler = adler32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_adler32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 893  :         s->status = BUSY_STATE;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+4], 113			; 00000071H

; 894  : 
; 895  :         /* Compression must start with an empty pending buffer */
; 896  :         flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 897  :         if (s->pending != 0) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN43@deflate

; 898  :             s->last_flush = -1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+40], -1

; 899  :             return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN43@deflate:

; 900  :         }
; 901  :     }
; 902  : #ifdef GZIP
; 903  :     if (s->status == GZIP_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 57			; 00000039H
	jne	$LN54@deflate

; 904  :         /* gzip header */
; 905  :         strm->adler = crc32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 906  :         put_byte(s, 31);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+eax], 31			; 0000001fH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 907  :         put_byte(s, 139);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 139			; 0000008bH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 908  :         put_byte(s, 8);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 909  :         if (s->gzhead == Z_NULL) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+28], 0
	jne	$LN55@deflate

; 910  :             put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 911  :             put_byte(s, 0);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 912  :             put_byte(s, 0);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+eax], 0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 913  :             put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 914  :             put_byte(s, 0);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx], 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 915  :             put_byte(s, s->level == 9 ? 2 :

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+132], 9
	jne	SHORT $LN108@deflate
	mov	DWORD PTR tv278[ebp], 2
	jmp	SHORT $LN109@deflate
$LN108@deflate:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 2
	jge	SHORT $LN106@deflate
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+132], 2
	jl	SHORT $LN106@deflate
	mov	DWORD PTR tv277[ebp], 0
	jmp	SHORT $LN107@deflate
$LN106@deflate:
	mov	DWORD PTR tv277[ebp], 4
$LN107@deflate:
	mov	edx, DWORD PTR tv277[ebp]
	mov	DWORD PTR tv278[ebp], edx
$LN109@deflate:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	dl, BYTE PTR tv278[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 916  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 917  :                       4 : 0));
; 918  :             put_byte(s, OS_CODE);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 10			; 0000000aH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 919  :             s->status = BUSY_STATE;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 113			; 00000071H

; 920  : 
; 921  :             /* Compression must start with an empty pending buffer */
; 922  :             flush_pending(strm);

	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_flush_pending
	add	esp, 4

; 923  :             if (s->pending != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN57@deflate

; 924  :                 s->last_flush = -1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+40], -1

; 925  :                 return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN57@deflate:

; 926  :             }
; 927  :         }

	jmp	$LN54@deflate
$LN55@deflate:

; 928  :         else {
; 929  :             put_byte(s, (s->gzhead->text ? 1 : 0) +

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN110@deflate
	mov	DWORD PTR tv302[ebp], 1
	jmp	SHORT $LN111@deflate
$LN110@deflate:
	mov	DWORD PTR tv302[ebp], 0
$LN111@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN112@deflate
	mov	DWORD PTR tv306[ebp], 2
	jmp	SHORT $LN113@deflate
$LN112@deflate:
	mov	DWORD PTR tv306[ebp], 0
$LN113@deflate:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN114@deflate
	mov	DWORD PTR tv311[ebp], 0
	jmp	SHORT $LN115@deflate
$LN114@deflate:
	mov	DWORD PTR tv311[ebp], 4
$LN115@deflate:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN116@deflate
	mov	DWORD PTR tv316[ebp], 0
	jmp	SHORT $LN117@deflate
$LN116@deflate:
	mov	DWORD PTR tv316[ebp], 8
$LN117@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN118@deflate
	mov	DWORD PTR tv321[ebp], 0
	jmp	SHORT $LN119@deflate
$LN118@deflate:
	mov	DWORD PTR tv321[ebp], 16		; 00000010H
$LN119@deflate:
	mov	eax, DWORD PTR tv302[ebp]
	add	eax, DWORD PTR tv306[ebp]
	add	eax, DWORD PTR tv311[ebp]
	add	eax, DWORD PTR tv316[ebp]
	add	eax, DWORD PTR tv321[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 930  :                      (s->gzhead->hcrc ? 2 : 0) +
; 931  :                      (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 932  :                      (s->gzhead->name == Z_NULL ? 0 : 8) +
; 933  :                      (s->gzhead->comment == Z_NULL ? 0 : 16)
; 934  :                      );
; 935  :             put_byte(s, (Byte)(s->gzhead->time & 0xff));

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 936  :             put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 937  :             put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 938  :             put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+4]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 939  :             put_byte(s, s->level == 9 ? 2 :

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 9
	jne	SHORT $LN122@deflate
	mov	DWORD PTR tv385[ebp], 2
	jmp	SHORT $LN123@deflate
$LN122@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+136], 2
	jge	SHORT $LN120@deflate
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+132], 2
	jl	SHORT $LN120@deflate
	mov	DWORD PTR tv384[ebp], 0
	jmp	SHORT $LN121@deflate
$LN120@deflate:
	mov	DWORD PTR tv384[ebp], 4
$LN121@deflate:
	mov	eax, DWORD PTR tv384[ebp]
	mov	DWORD PTR tv385[ebp], eax
$LN123@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	al, BYTE PTR tv385[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 940  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 941  :                       4 : 0));
; 942  :             put_byte(s, s->gzhead->os & 0xff);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 943  :             if (s->gzhead->extra != Z_NULL) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN58@deflate

; 944  :                 put_byte(s, s->gzhead->extra_len & 0xff);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+20]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 945  :                 put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+20]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN58@deflate:

; 946  :             }
; 947  :             if (s->gzhead->hcrc)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN59@deflate

; 948  :                 strm->adler = crc32(strm->adler, s->pending_buf,

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN59@deflate:

; 949  :                                     s->pending);
; 950  :             s->gzindex = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], 0

; 951  :             s->status = EXTRA_STATE;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 69			; 00000045H
$LN54@deflate:

; 952  :         }
; 953  :     }
; 954  :     if (s->status == EXTRA_STATE) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 69			; 00000045H
	jne	$LN60@deflate

; 955  :         if (s->gzhead->extra != Z_NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+16], 0
	je	$LN61@deflate

; 956  :             ulg beg = s->pending;   /* start of bytes to update crc */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _beg$9[ebp], eax

; 957  :             uInt left = (s->gzhead->extra_len & 0xffff) - s->gzindex;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+20]
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _s$[ebp]
	sub	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR _left$6[ebp], eax
$LN2@deflate:

; 958  :             while (s->pending + left > s->pending_buf_size) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _left$6[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	jbe	$LN3@deflate

; 959  :                 uInt copy = s->pending_buf_size - s->pending;

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _copy$3[ebp], ecx

; 960  :                 zmemcpy(s->pending_buf + s->pending,

	mov	edx, DWORD PTR _copy$3[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+32]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+20]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 961  :                         s->gzhead->extra + s->gzindex, copy);
; 962  :                 s->pending = s->pending_buf_size;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+20], eax
$LN6@deflate:

; 963  :                 HCRC_UPDATE(beg);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN4@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$9[ebp]
	jbe	SHORT $LN4@deflate
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR _beg$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _beg$9[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN4@deflate:
	xor	eax, eax
	jne	SHORT $LN6@deflate

; 964  :                 s->gzindex += copy;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, DWORD PTR _copy$3[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], edx

; 965  :                 flush_pending(strm);

	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_flush_pending
	add	esp, 4

; 966  :                 if (s->pending != 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN63@deflate

; 967  :                     s->last_flush = -1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], -1

; 968  :                     return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN63@deflate:

; 969  :                 }
; 970  :                 beg = 0;

	mov	DWORD PTR _beg$9[ebp], 0

; 971  :                 left -= copy;

	mov	ecx, DWORD PTR _left$6[ebp]
	sub	ecx, DWORD PTR _copy$3[ebp]
	mov	DWORD PTR _left$6[ebp], ecx

; 972  :             }

	jmp	$LN2@deflate
$LN3@deflate:

; 973  :             zmemcpy(s->pending_buf + s->pending,

	mov	edx, DWORD PTR _left$6[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+32]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+20]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 974  :                     s->gzhead->extra + s->gzindex, left);
; 975  :             s->pending += left;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, DWORD PTR _left$6[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN9@deflate:

; 976  :             HCRC_UPDATE(beg);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN7@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$9[ebp]
	jbe	SHORT $LN7@deflate
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR _beg$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _beg$9[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN7@deflate:
	xor	eax, eax
	jne	SHORT $LN9@deflate

; 977  :             s->gzindex = 0;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+32], 0
$LN61@deflate:

; 978  :         }
; 979  :         s->status = NAME_STATE;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+4], 73			; 00000049H
$LN60@deflate:

; 980  :     }
; 981  :     if (s->status == NAME_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 73			; 00000049H
	jne	$LN65@deflate

; 982  :         if (s->gzhead->name != Z_NULL) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+28], 0
	je	$LN66@deflate

; 983  :             ulg beg = s->pending;   /* start of bytes to update crc */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$8[ebp], ecx
$LN12@deflate:

; 984  :             int val;
; 985  :             do {
; 986  :                 if (s->pending == s->pending_buf_size) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN67@deflate
$LN15@deflate:

; 987  :                     HCRC_UPDATE(beg);

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN13@deflate
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _beg$8[ebp]
	jbe	SHORT $LN13@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN13@deflate:
	xor	edx, edx
	jne	SHORT $LN15@deflate

; 988  :                     flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 989  :                     if (s->pending != 0) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN69@deflate

; 990  :                         s->last_flush = -1;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+40], -1

; 991  :                         return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN69@deflate:

; 992  :                     }
; 993  :                     beg = 0;

	mov	DWORD PTR _beg$8[ebp], 0
$LN67@deflate:

; 994  :                 }
; 995  :                 val = s->gzhead->name[s->gzindex++];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [ecx+28]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	DWORD PTR _val$2[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 996  :                 put_byte(s, val);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	dl, BYTE PTR _val$2[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 997  :             } while (val != 0);

	cmp	DWORD PTR _val$2[ebp], 0
	jne	$LN12@deflate
$LN18@deflate:

; 998  :             HCRC_UPDATE(beg);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN16@deflate
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR _beg$8[ebp]
	jbe	SHORT $LN16@deflate
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, DWORD PTR _beg$8[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _beg$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN16@deflate:
	xor	edx, edx
	jne	SHORT $LN18@deflate

; 999  :             s->gzindex = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], 0
$LN66@deflate:

; 1000 :         }
; 1001 :         s->status = COMMENT_STATE;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 91			; 0000005bH
$LN65@deflate:

; 1002 :     }
; 1003 :     if (s->status == COMMENT_STATE) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 91			; 0000005bH
	jne	$LN71@deflate

; 1004 :         if (s->gzhead->comment != Z_NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+36], 0
	je	$LN72@deflate

; 1005 :             ulg beg = s->pending;   /* start of bytes to update crc */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _beg$7[ebp], eax
$LN21@deflate:

; 1006 :             int val;
; 1007 :             do {
; 1008 :                 if (s->pending == s->pending_buf_size) {

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+12]
	jne	SHORT $LN73@deflate
$LN24@deflate:

; 1009 :                     HCRC_UPDATE(beg);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN22@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$7[ebp]
	jbe	SHORT $LN22@deflate
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR _beg$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _beg$7[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN22@deflate:
	xor	eax, eax
	jne	SHORT $LN24@deflate

; 1010 :                     flush_pending(strm);

	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_flush_pending
	add	esp, 4

; 1011 :                     if (s->pending != 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN75@deflate

; 1012 :                         s->last_flush = -1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], -1

; 1013 :                         return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN75@deflate:

; 1014 :                     }
; 1015 :                     beg = 0;

	mov	DWORD PTR _beg$7[ebp], 0
$LN73@deflate:

; 1016 :                 }
; 1017 :                 val = s->gzhead->comment[s->gzindex++];

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx+36]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _val$1[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], edx

; 1018 :                 put_byte(s, val);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	al, BYTE PTR _val$1[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1019 :             } while (val != 0);

	cmp	DWORD PTR _val$1[ebp], 0
	jne	$LN21@deflate
$LN27@deflate:

; 1020 :             HCRC_UPDATE(beg);

	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN25@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$7[ebp]
	jbe	SHORT $LN25@deflate
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, DWORD PTR _beg$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _beg$7[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN25@deflate:
	xor	eax, eax
	jne	SHORT $LN27@deflate
$LN72@deflate:

; 1021 :         }
; 1022 :         s->status = HCRC_STATE;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], 103			; 00000067H
$LN71@deflate:

; 1023 :     }
; 1024 :     if (s->status == HCRC_STATE) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 103			; 00000067H
	jne	$LN77@deflate

; 1025 :         if (s->gzhead->hcrc) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	$LN78@deflate

; 1026 :             if (s->pending + 2 > s->pending_buf_size) {

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 2
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	jbe	SHORT $LN79@deflate

; 1027 :                 flush_pending(strm);

	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_flush_pending
	add	esp, 4

; 1028 :                 if (s->pending != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN79@deflate

; 1029 :                     s->last_flush = -1;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+40], -1

; 1030 :                     return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN79@deflate:

; 1031 :                 }
; 1032 :             }
; 1033 :             put_byte(s, (Byte)(strm->adler & 0xff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 1034 :             put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 1035 :             strm->adler = crc32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN78@deflate:

; 1036 :         }
; 1037 :         s->status = BUSY_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 113			; 00000071H

; 1038 : 
; 1039 :         /* Compression must start with an empty pending buffer */
; 1040 :         flush_pending(strm);

	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_flush_pending
	add	esp, 4

; 1041 :         if (s->pending != 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN77@deflate

; 1042 :             s->last_flush = -1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], -1

; 1043 :             return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN77@deflate:

; 1044 :         }
; 1045 :     }
; 1046 : #endif
; 1047 : 
; 1048 :     /* Start a new block or continue the current one.
; 1049 :      */
; 1050 :     if (strm->avail_in != 0 || s->lookahead != 0 ||

	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN83@deflate
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 0
	jne	SHORT $LN83@deflate
	cmp	DWORD PTR _flush$[ebp], 0
	je	$LN82@deflate
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 666			; 0000029aH
	je	$LN82@deflate
$LN83@deflate:

; 1051 :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
; 1052 :         block_state bstate;
; 1053 : 
; 1054 :         bstate = s->level == 0 ? deflate_stored(s, flush) :

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+132], 0
	jne	SHORT $LN128@deflate
	mov	edx, DWORD PTR _flush$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_deflate_stored
	add	esp, 8
	mov	DWORD PTR tv724[ebp], eax
	jmp	SHORT $LN129@deflate
$LN128@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+136], 2
	jne	SHORT $LN126@deflate
	mov	edx, DWORD PTR _flush$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_deflate_huff
	add	esp, 8
	mov	DWORD PTR tv723[ebp], eax
	jmp	SHORT $LN127@deflate
$LN126@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+136], 3
	jne	SHORT $LN124@deflate
	mov	edx, DWORD PTR _flush$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_deflate_rle
	add	esp, 8
	mov	DWORD PTR tv722[ebp], eax
	jmp	SHORT $LN125@deflate
$LN124@deflate:
	mov	ecx, DWORD PTR _flush$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	mov	edx, DWORD PTR _configuration_table[ecx+8]
	call	edx
	add	esp, 8
	mov	DWORD PTR tv722[ebp], eax
$LN125@deflate:
	mov	eax, DWORD PTR tv722[ebp]
	mov	DWORD PTR tv723[ebp], eax
$LN127@deflate:
	mov	ecx, DWORD PTR tv723[ebp]
	mov	DWORD PTR tv724[ebp], ecx
$LN129@deflate:
	mov	edx, DWORD PTR tv724[ebp]
	mov	DWORD PTR _bstate$5[ebp], edx

; 1055 :                  s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 1056 :                  s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 1057 :                  (*(configuration_table[s->level].func))(s, flush);
; 1058 : 
; 1059 :         if (bstate == finish_started || bstate == finish_done) {

	cmp	DWORD PTR _bstate$5[ebp], 2
	je	SHORT $LN85@deflate
	cmp	DWORD PTR _bstate$5[ebp], 3
	jne	SHORT $LN84@deflate
$LN85@deflate:

; 1060 :             s->status = FINISH_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 666			; 0000029aH
$LN84@deflate:

; 1061 :         }
; 1062 :         if (bstate == need_more || bstate == finish_started) {

	cmp	DWORD PTR _bstate$5[ebp], 0
	je	SHORT $LN87@deflate
	cmp	DWORD PTR _bstate$5[ebp], 2
	jne	SHORT $LN86@deflate
$LN87@deflate:

; 1063 :             if (strm->avail_out == 0) {

	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN88@deflate

; 1064 :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+40], -1
$LN88@deflate:

; 1065 :             }
; 1066 :             return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN86@deflate:

; 1067 :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 1068 :              * of deflate should use the same flush parameter to make sure
; 1069 :              * that the flush is complete. So we don't have to output an
; 1070 :              * empty block here, this will be done at next call. This also
; 1071 :              * ensures that for a very small output buffer, we emit at most
; 1072 :              * one empty block.
; 1073 :              */
; 1074 :         }
; 1075 :         if (bstate == block_done) {

	cmp	DWORD PTR _bstate$5[ebp], 1
	jne	$LN82@deflate

; 1076 :             if (flush == Z_PARTIAL_FLUSH) {

	cmp	DWORD PTR _flush$[ebp], 1
	jne	SHORT $LN90@deflate

; 1077 :                 _tr_align(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_align
	add	esp, 4
	jmp	SHORT $LN91@deflate
$LN90@deflate:

; 1078 :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

	cmp	DWORD PTR _flush$[ebp], 5
	je	SHORT $LN91@deflate

; 1079 :                 _tr_stored_block(s, (char*)0, 0L, 0);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__tr_stored_block
	add	esp, 16					; 00000010H

; 1080 :                 /* For a full flush, this empty block will be recognized
; 1081 :                  * as a special marker by inflate_sync().
; 1082 :                  */
; 1083 :                 if (flush == Z_FULL_FLUSH) {

	cmp	DWORD PTR _flush$[ebp], 3
	jne	SHORT $LN91@deflate
$LN30@deflate:

; 1084 :                     CLEAR_HASH(s);             /* forget history */

	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	xor	ecx, ecx
	mov	WORD PTR [edx+eax*2-2], cx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+76]
	lea	ecx, DWORD PTR [eax+eax-2]
	push	ecx
	push	0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	xor	ecx, ecx
	jne	SHORT $LN30@deflate

; 1085 :                     if (s->lookahead == 0) {

	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+116], 0
	jne	SHORT $LN91@deflate

; 1086 :                         s->strstart = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], 0

; 1087 :                         s->block_start = 0L;

	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+92], 0

; 1088 :                         s->insert = 0;

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5812], 0
$LN91@deflate:

; 1089 :                     }
; 1090 :                 }
; 1091 :             }
; 1092 :             flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 1093 :             if (strm->avail_out == 0) {

	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN82@deflate

; 1094 :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */

	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+40], -1

; 1095 :               return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN82@deflate:

; 1096 :             }
; 1097 :         }
; 1098 :     }
; 1099 : 
; 1100 :     if (flush != Z_FINISH) return Z_OK;

	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN96@deflate
	xor	eax, eax
	jmp	$LN1@deflate
$LN96@deflate:

; 1101 :     if (s->wrap <= 0) return Z_STREAM_END;

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jg	SHORT $LN97@deflate
	mov	eax, 1
	jmp	$LN1@deflate
$LN97@deflate:

; 1102 : 
; 1103 :     /* Write the trailer */
; 1104 : #ifdef GZIP
; 1105 :     if (s->wrap == 2) {

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+24], 2
	jne	$LN98@deflate

; 1106 :         put_byte(s, (Byte)(strm->adler & 0xff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 1107 :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 1108 :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 1109 :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 1110 :         put_byte(s, (Byte)(strm->total_in & 0xff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 1111 :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 1112 :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 1113 :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shr	eax, 24					; 00000018H
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 1114 :     }

	jmp	SHORT $LN99@deflate
$LN98@deflate:

; 1115 :     else
; 1116 : #endif
; 1117 :     {
; 1118 :         putShortMSB(s, (uInt)(strm->adler >> 16));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	shr	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_putShortMSB
	add	esp, 8

; 1119 :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	and	eax, 65535				; 0000ffffH
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_putShortMSB
	add	esp, 8
$LN99@deflate:

; 1120 :     }
; 1121 :     flush_pending(strm);

	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_flush_pending
	add	esp, 4

; 1122 :     /* If avail_out is zero, the application will call deflate again
; 1123 :      * to flush the rest.
; 1124 :      */
; 1125 :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jle	SHORT $LN100@deflate
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	neg	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN100@deflate:

; 1126 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN130@deflate
	mov	DWORD PTR tv871[ebp], 0
	jmp	SHORT $LN131@deflate
$LN130@deflate:
	mov	DWORD PTR tv871[ebp], 1
$LN131@deflate:
	mov	eax, DWORD PTR tv871[ebp]
$LN1@deflate:

; 1127 : }

	mov	esp, ebp
	pop	ebp
	ret	8
_deflate@8 ENDP
_TEXT	ENDS
END
